:PROPERTIES:::dbhost:  localhost::dbuser:   postgres:END:#+PROPERTY: header-args:python :results output#+PROPERTY: header-args:sql :engine postgresql :dbhost localhost :dbuser postgres* Term 1** Week 1** Week 2 Class Notes*** Day 2 - CSS Intro <2021-06-26 Sat>**** Olivers Links    https://oliver-coderacademy.github.io/**** Docs    Bash - https://www.gnu.org/software/bash/manual/bash.html    Git  - https://git-scm.com/docs    HTML - https://devdocs.io/html/    CSS  - https://devdocs.io/css/**** Cheatsheets    Markdown - https://www.markdownguide.org/cheat-sheet/    Git - https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet    HTML - https://htmlcheatsheet.com/    CSS - https://htmlcheatsheet.com/css/**** CSS    HTML is the structure, CSS is the paint.    Ways to define style:    - Inline: Color Style: <h1 style="color: red;">Learning CSS is fun</h1>    - Specify in the header      <style>         h1 {         color: xx         font-size: xxpx        }    - Make a seperate 'styles sheet'    - Can give individual tags an id.    - They want you to use camelCase**** Cascading***** Inline takes the highest priority***** Specifying the 'id="xx"' INLINE,***** Class and sudo class***** Element itself e.g <div>***** When using IDs it should be unique***** red.green. - double class***** Specificity - a.green (101 points of specificity. , !important    Class = .    Element = <>    id = #    Psuedoclasses: h1:hover -** Positioning is done in styles.css***** Examples     - position:, absolute,fixed,     - top:     - left:**** Responsive Design:***** Add Meta Tag          <meta name="viewport" content="width=device-width, initial-scale=1.0">***** Media Breakpoints    Media breakpoints are basically like an if statement. If the conditional matches then it will apply the styling within it and if it does not match then it won’t. ~   @media screen and (max-width:599px) {     #one {         font-size: 40px;     } } ~***** Design for Mobile First     it is the smallest.***** CSS Flexbox     Automatically sizes and aligns objects that are contained inside.     Syntax     flexbox{     display: flex;     flex-direction: row|row-reverse|column|column-revers 3   justify-content:     align-items     }******* Wee isplayed one after another**** Balsamic Wireframing    Create a graphical layout for your web site design.**** Sitemap**** Self-paced work***** Things I have Learned:****** Link Style Sheet <link rel="stylesheet" href="styles.css" type="text/css" media="screen" /> <!-- setting media improves acessibility for non-visual users --> ****** Div, article or section?******* Div       Div is a general purpose element. /It should be viewed as the last resort/. Mainly used to group content for targeting with CSS. e.g. as a styling container for other elements.******* Section       More specific than a div. Should be applied to content that can be grouped together in a semantically meaningful way.       Generally, a section should have a 'theme'******* Article       Applied to a section of content that is symantically related - the content should be self-contained.******* Example: Articles within a section       List of Blog Posts = Section       Blog posts = article.*** D2 - SRI & XML MAPINGS**** Sub resource integrity    Cryptographic hash - start with they key easy to get the hash - impossible to get the hash.**** XML Sitemap:    allows site crawler to find and index your website. add to your root directory.*****  url set:     same for every site - specificaiton of how links should be read.*****  url links     what links are on your website. <loc> tag.***** XML sitemap tools     Tools exist to generate and validate your xml sitemap.***** Flex Grid.***** Semantic HTML is important.*** D3: Accessiblity:***** Equal life potential***** Web content accessibility guidelines WCAG 2.0** Week 4 Day 1 - Portfolio Work*** Kahoot****** Discord Chat:*** Mindmap - ?*** Semantic HTML -**** Section**** Article*** Presentation**** Include all text on slides - slides are marked.**** Walkthrough - Summary***** Design process and decsions****** Build a framework that is adaptable for change****** Minimal clean, user expectactions****** Followed WC3 standards*****  design components****** Techstack******* HTML******* CSS******* Deployed - - Github pages****** Overview of componentss******* Nav bar******* hamburger menu?******* Logo******* Footer******* Images******* Call to action button******* Links******* Form******* headings******* Sections******* Articles****** Stylings******* Hexcodes******* Font type******* Background****** Universal Compoents******* A logo******* Nav bar******* Footer******* Copyright notice?******* Pictures of what is included******* Explain why.****** Home Page******* Sections and compontents****** Wireframes****** Hover effect to enlarge?****** About Page - Develop, Collaborate, Language & Travel******* Components on the page.******* Responsitivity - 1/ 2/ 4 articles visible.****** Experiance Page - Button******* Acessibility link - to top of page.****** Audience engagement - hover effect.***** RETURN TO TOP LINKS***** Responsiveness change font ??***** Contact Me****** Button Tag ? ?**** Build Process**** Challenges***** Expectations there were beyond my knowledge***** Research while coding***** Responsive Design********* Favourite Prats***** Seeing the final project to completion***** Learning processing***** Autonomy of the design and content***** Having a plat form to showcase my current and future works***** Preplanning**** Design Slides***** What***** How***** Why***** What did it look like**** Developent and build process.** Week 6 - Python: Booleans, Lists, Tuples Ranges*** Booleans   Represent one of two possible states: either True or False. *Case sensitive*   We can convert data types - with booleans as well.   Ex.:   bool(0) - false   bool("") - false   bool(None) - false   bool(False) - false   anything else is a true value   bool(1)   bool(-2)   bool("hey")   this is usefull for testing if a variable is empty or not.**** Comparison Operators|     | Comparison Operators                      ||----+-------------------------------------------|| == | True if operands are equal                || != | True if operands are not equal            || <> | True if operands are not equal            || >  | True if left is greater than right        || <  | True if right is greater than left        || >= | True if right is greater or equal to left ||    |                                           |**** Comparing Strings    Comparing strings is a little more difficult   | ___          | ___  |   | "a" > "A"    | True |   | "hi" < "hey" | False |   Python will convert the characters in the string to the ASCII value and then compare those numbers.   We can get the ASCII value of any car using the ord() function .   The reverse of ord() is chr() - this will take an ACII value and convert it to a char.**** Logical Operators    When we need to use multiple comparisons before we come to a True / False we can use logical operators.    | Operator | Description                                     | Example           |    |----------+-------------------------------------------------+-------------------|    | and      | True if both operands are True                  | (a and b) is True |    | or       | True if any of the operands are True            | (a or b) is True  |    | not      | Used to revese the logical state of the operand | Not(a and b)      |    |----------+-------------------------------------------------+-------------------| note: not goes in front of a logical statement, a gives the opposite of the statement.**** Membership Operators    Allows us to compare a portion of a sequence to another   | Operator | Description                   | Example                                    |   |----------+-------------------------------+--------------------------------------------|   | in       | true if variable is found     | x in y, results in 1 if x is a member of y |   | not in   | true if variable is not found | x not in y, results in 1 if x not a me..   |   |----------+-------------------------------+--------------------------------------------|  Examples:   "wel" in "welcome"   the order of the string is important: "elw" in "welcome" is false.******* Lists, Tuples, Ranges**** Sequences    A sequence is an ordered collection of items. Each item in a sequence can be accessed by its index value and indexes start at 0 not 1.    If you want to know the length of a sequence you can use the len() function.    To access an individual information of within a sequence we always use [] with the index number.   We can also count backwards when indexing a string Eg:   |  H |  e |  l |  l |  o |   |  0 |  1 |  2 |  3 |  4 |   | -5 | -4 | -3 | -2 | -1 |   |----+----+----+----+----| Note: going backwards the index starts at 1 because -0 is not possible. Sequences come in two different types, they are either immutable, which means you cannot change it, or they are mutable, which means that you are free to chop and change anything you want. Slicing: A slice is a portion of the sequence. ~sequence[start:end:increment]~ ~ greeting = "Hello"  slice = greeting[1:3]  print(slice) ~**** Lists    Lists are a collection of different item types. Whereas a string was a sequence of characters a list can be a collection of anything.    Lists are useful when we need to store more complex data in a particular order.    Lists are wrapped in square brackets and each item is separated by a comma.    Lists are *mutable*. We can change them when ever we want.    ~~ groceries = ["milk", "eggs", "meat", "veggies"]~~    ~~ print(groceries)~~    ~~ groceries[-1] = "more meat" ~~    ~~ print(groceries) ~~    Lists have methods, here are a few:    | Method    | Description                                       |    |-----------+---------------------------------------------------|    | append()  | adds element                                      |    | clear()   | removes element                                   |    | copy()    | copy list                                         |    | count()   | numer of elements with specific value             |    | extend()  | add the element to the end of list                |    | index()   | return index of first element with specific value |    | insert()  | add element at the specific position              |    | pop()     | remove element a the specific position            |    | remove()  | remove first element with specific value          |    | reverse() | reverses the order of the list                    |    | sort()    | sorts the list                                    |    |-----------+---------------------------------------------------|**** Tuples    A tuple is a list that is immutable. Once it has been created it cannot be changed.    A tuple is created using parenthesis instead of square brackets    ~~ people = ("garret", "bruce", "sally", "saad") ~~    Note: the parenthesis are optional but it is best practice to use them.**** Ranges    An immutable sequence of numbers. Ranges take up a small amount of space.    To create a range we need to use the range() function    ~~ one_to_ten = range(1,11) ~~    To actually see the values of a range we need to *unpack* the values using the * inside of print    ~~ print(*one_to_ten) ~~    The range function has a third argument which allows us to declare a step value:    ~~ one_to_ten = range(1,11,2) ~~    Just like any other sequence we can access a single value by its index or a slice    ~~ print(one_to_ten[3]) ~~    ~~ print(one_to_ten[2:6]) ~~*** *I missed 3 Classes***** Lists,Ranges and Tuples (Cont)**** Sets and Dicts**** Sec/Dict Challenges + Python Setup** Week 7 Loops, Functions*** Assignment:   Need to create markdown file and then convert to PDF. There is a template file on the assignment page.   Length of Answers?:   How to reference: Chicago*** Extension Challenge:   On olivers links**** Flim Flam Challenge**** Triangle Challenge*** Loops   Loops allow us to repeat a process over and over again until a certain condition is met and the program determines it is ok to exit the loop.  Python has two different types of loops:  1. while loop - executes as long as the given condition is true  2. for loop - executes over a specific number of items**** While Loop   This is an example of a loop that will count to 10 and then stop.    #+begin_src python :results output      current_number = 1              #      while current_number <= 10:          print(current_number)          current_number += 1    #+end_src    #+RESULTS:    #+begin_example    1    2    3    4    5    6    7    8    9    10    #+end_example***** Break     To exit a loop even if the condition is still True we use the *break* keyword.     Here is a more complex example that uses while loop, user input and break points.    #+begin_src python      password = "bananas"      attempts = 0      while user_input=input("Enter the password: ") != user_password:          print("incorrect password")          attempts += 1          if attempts > 4:              print("You have tried too many times")              break      print("that is the correct password")    #+end_src**** For Loop    When you want to go through a loop a set number of times.    ~~ for {variable} in {sequence} ~~***** For loops with ranges     #+begin_src python       for number in range(1,11):           print("hello!")     #+end_src   On each iteration of the loop the variable will hold the value for that item.   An easy to way access the index and the value in a for loop:   We can use the enumerate() function.   #+begin_src python     students = ["garret", "bruce", "steph", "roberta", "mike"]     for index, student in enumerate(students):         print(f"Index {index} for value {student}")   #+end_srcNOTE: In the above, both INDEX and STUDENT are iterated variables. Where student is the result of students[index]**** Nested Sequences (multi-dimnesional)    #+begin_src python      addresses = [          ("123 Fake Street", "Sydney", "NSW"),          ("45 No Where Drive", "Melbourne", "VIC"),          ("67 Who Knows Circuit", "Brisbance", "QLD")      ]      selection = addresses[1][0]      print(selection)    #+end_src*** Functions   Group of code that can be reused by calling its name.   Syntax to define a function:   #+begin_src python     def print_hello():         print("hey there")   #+end_src  To define a function we must use the *def* keyword.**** Scope    In python, the lexical scope of a variable depends on its block. variables inside a child block can not be accessed by the parent block    children have access to the parent but a parent cannot access its children.    Example of Scopes:    This example demonstrates that variables are unique to their block. the dog variable inside the function is different to the parent dog variable.    #+begin_src python :results output      dog = "roddy"      def my_dog():          dog = "pickles"          print(dog)      my_dog()      print(dog)    #+end_src    #+RESULTS:    : pickles    : roddy    This example demonstrates that python does not run the code inside a function until it is executed.    #+begin_src python :results output      def cat():          print("hates")          dog()      def dog():          print("doggo")      cat()    #+end_src    #+RESULTS:    : hates    : doggo**** Return    Functions can also return values.    When /return/ is called no other lines of code within the function will run.    #+begin_src python :results output      def add_two_things():          return 3+7      answer = add_two_things()      print(answer)    #+end_src    #+RESULTS:    : 10** Week 8 Parameters, Error Handling, Testing, Project Management*** Parameters   Inside the paranthesis we can define parameters for our function.   Parameters allow us to pass in arguments to our function which are values at the time of executions. Here's an example:   #+begin_src python :results output     def add_two_numbers(num1, num2):         return num1 + num2     answer = add_two_numbers(15,7)     print(answer)   #+end_src   #+RESULTS:   : 22**** Optional Parameters    We can define a default parameter for when no parameter is passed in.    #+begin_src python :results output      def print_greeting(greeting="hi"):          print(greeting + "!!!")      print_greeting()      print_greeting("morning")    #+end_src    #+RESULTS:    : hi!!!    : morning!!!**** Keyword Arguments    If a function has multiple arguments we need a way to pass an argument for a specific variable.    #+begin_src python :results output      def mdas(num1, num2, num3=1, num4=0, num5=0):          return num1 * num2 / num3 + num4 - num5      answer = mdas(3, 5, num4=10)      print(answer)    #+end_src    #+RESULTS:    : 25*** Error Handling, Testing & Project Management**** Errors and Exceptions    There is a difference between errors and exceptions.    An error in python is a syntax error. The code was unable to run.   Syntax error occurs before it runs a single line of code.   With logical errors our code is able to run until it encounters that error. This is why these types of errors are called exceptions.  |--------------------+---------------------------------------------|  | Exception          | Cause of Error                              |  |--------------------+---------------------------------------------|  | AssertionError     | assert statement failes                     |  | Attribute Error    | Attribute assignment or reference fails     |  | EOFError           | input() function hits end of file condition |  | FloatingPointError | floating point operatation fails            |  | GeneratorExit      | generators close() method is called         |  | ImportError        | imported module is not found                |  | IndexError         | Index of a sequence is out of range         |  | KeyError           | Key is not found in dictionary              |  | KeyboardInterrupt  | User hits interrupt keyword                 |  | Memory Error       | Operation runs out of memory                |  | NameError          | Variable is not found in scope              |  | NotImplementedEr   | Abstract methods                            |  | OSError            | Operting system related error               |  | OverflowError      | Arithmetic operation too large to ..        |  | Reference Error    | Weak reference to garbage collected         |  | RuntimeError       | Error does not fall under category          |  | StopIteration      | Next() function no further item             |  | SyntxError         | Parser encounters syntax error              |  | IndentationErr     | Raised when there is incorrect indenation   |  | TabError           | Inconsistent indentation and spaces         |  | SystemError        | Internal Error                              |  | SystemExit         | sys.exit() function                         |  | TypeError          | operation applied to incorrect type         |  | UnboundLocalError  | no value bound to variable                  |  | UnicodeError       | encoding / decoding error                   |  | UnicodeDeCodeError | ''                                          |  | ValueError         | correct type but improper value             |  | ZeroDivisionError  | Second operand of division is zero          |  |--------------------+---------------------------------------------|Exceptions can be handled in a way that wont completely kill our programs. We can continue to run code even if an exception occurs.Any code we want to check for an exception can go into a  ~try~ blockWe#+begin_src python :results output  try:      my_list = ["a", "b"]      print(THE_LIST[2])      print("ran in the try")  except NameError as error:      print(error)  except IndexError:      print("ran in the except")  print("I ran")#+end_src#+RESULTS:: name 'THE_LIST' is not defined: I ranIn python we can also raise exceptions whenever we want in our code.#+begin_src python :results output  name = "Mary"  raise Exception("My custom exception")  print(name)#+end_src#+RESULTS:**** Testing***** Manual Testing     Manual testing done in person. Tester will record what test failed and how we can recreate that failure. Some bugs have higher priority than others because of severity.     The 5 most common severity levels in use are:     1. Blocker: bug prevents testers from further testing     2. Critical: bug has security issues, leads to program crashing, data loss or other serious things.     3. Major: bug in the main functionality of the program.     4. Minor: bug may be an insignificant problem of the program functioning     5. Cosmetic: bug has little impact on the program functioning. mostly styling issues such as button size, colour ect. Most manual tests fall into a certain type of testing called a functional test. Functional tests focus on the output of an action and do not check the intermediate states.Another type of testing is called exploratory testing. This type of testing is more of a testing exercise. once we write code we know how the program should work and how it should be used. This is called the happy path.Exploratory testing puts our application in the hands of someone who is unfamiliar with it. This emulates how the applicaiton would be used in the wild.***** Manual Test Tracking:There are many different types of software to track our testing but a normal spreadsheet can be just as effective.The most common things to track in a test spreadsheet are:- Feature being tested- Test case summary- Test data- Expected result- Actual result- Status- CommentsOther information maybe useful to track inlcuding: the testing procedure, the date of the test, who tested and the environment they tested in.*Test Case* : are a defined set of actions executed to verify a particular feature or piece of functionality within the application.Example: Test the ability to login with a username and password, some test cases would be:- check results on entering a valid username and a password- Check results on entering a invalid username and password- Check results on entering a valid username but invalid password- Check results on entering neither a username or password**** Project Management    Requirements -> Architecture/Design -> Code -> Code Review -> Test -> Release   Requirements: Determined by the client and product manager   Architecture/Design: Developers design code review and test   Release: An operations team will deploy the release and updates   Two project management methods:***** Waterfalle    : - traditional way of develpoing software, well defined but rigid    - All requirements, designs, schedules and expected end products are agreed upond between development team and client before development begins.      Pros: you know what you will have to produce before you start because you work with completed designs and expected reulsts.      You have a clear idea of when the product will release because everything is well and completely documented.      Cons: It takes longer to get someting out because there's so much documentation required.      When problems happen there is little room to reocver which often leads to delivering late.      You rarely deliver what the client actually wants.*****  Agile    : - iterative process characterised by flexibility and continuous incorporation of client feedback    Pros: As soon as basic requirements are understood, you can start coding.    Less formal documentation makes happy coders    More likely to produce what the client actually wants   Cons: For the developer and client it can feel chaotic if its not well-managed   Gives the client license to change their mind - which can result in unplanned reowrk and exploding scope and cost*****  Tools     Product management tools: Trello / Jira     Source code repository: Github / Perforce     Collaboration: Slack / Confluence*** Packages and Modules   Methods are a function that is associated with an objected. Here is an example:   #+begin_src python :results output     greeting = "hello"     print(greeting)     print(greeting.capitalize())   #+end_src   #+RESULTS:   : hello   : Hello  Because this function is associated to the string object we invoke the function with a dog followed by the function name.Many string methods exist, here are some useful ones:  #+begin_src python"hello".capitalize() #capitalises first word in string"hey there".title() #capitalises all the words in string"10".isnumeric() #returns True if string is only numeric characters"BEE TIME".lower() #returns a lowercase version of the string"  password  ".strip() #removes beginning and ending characters (defaults to whitespace)"tiny".upper() #returns a uppercase version of the string  #+end_src Ints and float have built in methods too but they are not used as much. #+begin_src pythonnum = 3.0num.is_integer() #returns True if there are no floating valuesnum = 4num.bit_length() #returns amount of bits necessary to represent the number in binary #+end_src Python has many more built in functions, they can be found here: [[https://docs.python.org/3/library/functions.html]]**** Modules    Modules let us split up our code into separate files. To use a module we use the ~import~ keyword. Imported modules are referenced with a namespace. In python we use dots instead of forward slashes when denoting a path. Python allows us to create an alias for a name space that we want to use:E.g: ~import stuff.functions as funky~ Sometimes we just want to import a function and not a module. to do this we use the ~from~ keyword.E.g:~from stuff.functions import sum~**** Standard Library    Python includes a bunch of base modules. Some of these are ~sys~ and ~math~ and ~random~.    #+begin_src python      # main.py      import math      num1 = math.ceil(2.1)      num2 = math.floor(2.9)      print(num1)      print(num2)    #+end_src   The ceil function from the math module always rounds up and the floor function always rounds down.   #+begin_src python     import random     import math     random_number = math.ceil(random.random() * 10)     print(random_number)   #+end_src*** This is an example** Week 9 Files & Context Managers, Bash*** Creating, Reading, Writing & Deleting Files   The built in os module lets us interact with external files.   #+begin_src python     import     try:         os.remove("my_file.txt")         print("file successfully deleted")     except FileNotFoundError:         print("file does not exist")   #+end_src If you are going to create a file, read the contents of a file or add new content, we use the same ~open~ function. Depending on what you want to do different arguments are used.|-----+----------------------------------------------------------------------------------|| "r" | Read - Default value. Opens a file for reading, error if the file does not exist || "a" | Append - Opens a file for appending, creates the file if it does not exist       || "w" | Write - Opens a file for writing, creates the file if it does not exist          || "x" | Create - Creates the specified file, returns an error if the file exists         ||-----+----------------------------------------------------------------------------------|Files are opened in a handler. When ever you open a file you need to close it.Here is an example program that will open a text file in the append mode, write to the file and then close the file.This example uses the ~finally~ block, which is meant for cleanup types of tasks such as close our file handler.This block will run no matter if there is an exception or not.#+begin_src python  try:      file = open("my_file.txt", "a")      file.write("new stuff")      print(i_dont_exist)  finally:      file.close()      print("all good I closed the file")#+end_srcWhen we want to read a file we must create the file handler using the 'r' mode.From here there are three options:1. read the entire contents or a certain number of lines using the read() function.#+begin_src python  try:      file = open("my_file.txt", "r")      contents = file.read()      print(contents)  finally:      file.close()#+end_src2. Read a single line of the file using readline()#+begin_src python try:    file = open("my_file.txt", "r")    single_line = file.readline()    print(single_line)finally:    file.close()#+end_src3. loop through the lines in the file#+begin_src pythontry:    file = open("my_file.txt", "r")    for line in file:        print(line)finally:    file.close()#+end_srcContext Manager:If you use open function in ~with~ statement, the file is opened (and closed) within the context manager. This is the easiest way.#+begin_src python  with open("some_file.txt", "a") as my_file:      my_file.write("\n\n Our context manager wrote this")#+end_src#+RESULTS:: None*** Discussion on Assignment 3:   Due date: Week 10, turnaround 10 days.   Read the rubric   Need to submit:   1. Software development plan.   2. An Implementation plan.   3. A production log with 2 status updates (these are submitted before the due date)   4. Screenshots / an export using a project management tool like Trello.   5. The application itself.   6. 2x feature tests. i.e - how program deals with incorrect input.   7. One or mash bash scripts.   Also need to use git/github, with at least 20 commits.   Each plan should be a /markdown/ file.   A good priority system is:   - Must have (Needed for the program to meet the Minimum Viable Product)   - Should have (Not quite MVP, but still relatively important)   - Could have (things that would be nice to have but not necessary)     Remember to include a help file & to look at the rubric*** Bash Scripting   Bash programming languages has features:   - native language of our terminal shell. It can run without a seperate interpreter.   - Its connected to the operating system at a fundamental level.   Bash has some weaknesses too though:   - It's slower to execute than python   - The language isn't as clear, which can make wiritng and reading programs harder   - It doesn't have as many fancy tools as Python does.    Here's a link to the Bash reference manual: https://www.gnu.org/software/bash/manual/bash.html**** The simplest bash wrapper    The first line: ~#! /bin/bash~  the shebang signals to your shell what program should be used to execute the script.   The second line: ~python relative/path/to/my/module.py~   The third line: ~chmod +x my_wrapper.sh~ - need to make it executable.**** Part 3 - Args    We can run bash scripts with arguments. The syntax is different. we just add our args, sperated by spaces. for example.    ~./my_wrapper.sh firstarg secondarg thirdarg~    To access the arguments in a bash script we use the syntax ~$<somenumber>~. we can also get the number of arguments passed with ~$#~   Using this method we can pass variables to our python app.   #+begin_src sh     #! /bin/bash     python example.py $1   #+end_src  To access that argument from inside our python code:  #+begin_src python    from sys import argv    print(f"The arguments you passed: '{argv}'")  #+end_src  We can access that argument individually in our python code. Using the same square bracket notation we'd use on any list - argv[1].  #+begin_src python    from sys import argv    if argv[1] == "insult me":        print("but you seem like such a nice fella!")    elif argv[1] == "compliment me":        print("don't get a big head")    else:        print("I didn't understand that...")  #+end_src  Using arguments like this is a great way to let users run your app in different modes! You can set it up so the default behaviour of the app happens when no extra arguments are given (i.e when len(argv)==0) and then if an argument is given you can use it to trigger alternative behaviour.**** Part 4: Checking the Environment:    Now we will learn how to to check that the environment has the requirments installed and if it doesnt, fail gracefully.    #+begin_src sh      #!/bin/bash      if ! [[ -x "$(command -v python)"]]      then          echo 'Error:               This program runs on Python, but it looks like Python is not installed.               To install Python, check out https://installpython3.com/' >&2          exit 1      fi    #+end_src Note: - We use the command ~exit 1~ This tells Bash to end your script and return 'code 1' - the traditional way to signal that an error has occured. (we use code 0 if everything goes according to plan.) - At the end of our ~echo~ statement we have the symbols >&2. That tells the Bash interpreter that what we're printing is error text, and not just regular program output.**** Idea; Have script that installs addons.*** Library Management   Python has a strong community of developers that create public packages   The python package pip - package installation for python is a tool that lets you install python libraries.   To install pip:   ~python3 -m ensurepip --upgrade~  For best practice we should also install a virtual environment system. Packages are constantly being updated and these updates may break your application.  A virtual environment allows you to install software for just that environment.  Install virtual environment with the command:  ~pip3 install virtualenv~**** Making a virtual environment    Navigate to the directory your assignment is in and create a virutal environment with the command:    ~virtualenv <inster_name_here>~   To activate the virtualenv use the command:   ~source <insert_name_here>/bin/activate~**** Requirements.txt file    convention: name_of_library == version_of_library    to install the contents of your requirements file the command is:    ~pip3 install -r path/to/your/requirements.txtArgs at START.* Term 2** Week 1 - Radices*** RadicesWhat is a base? We are familar with base 10, which has 10 digits (0,1,2,3...).Base 2 or Binary has two digits, (0,1).Electricity can onyl be on or off - this is why computers use binary.What happens when we run out of digits? - Consider the number 3126 in decimal| 10^3 | 10^2 | 10^1 | 10^0 || 1000 |  100 |   10 |    1 ||    3 |    1 |    2 |    6 |*** BinaryIn binary the base is 2. There are only 2 digits, 0 and 1.Every program we run on a computer is reduced to only 0's or 1's.Given there are only two digits, only 4 unique digit combinations can be formed.| digit2 | digit1 ||--------+--------||      0 |      0 ||      0 |      1 ||      1 |      0 ||      1 |      1 |Given only two digits 0 and 1, 8 unique digit combinations can be formed, 2^3=8.To get any value bigger than 3 we have to move to the next place value ect.| 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 ||  32 |  16 |   8 |   4 |   2 |   1 |*** Converting from decimal to binaryOne way to convert a decimal to binary is to find the highest power of 2 that divides into that number. Then determin which other base 2 place values we need to add.~52 Base 10~2^5 is the highest power of 2 that divides into 52. (2^6 is 64, which is too big.)To get to 52 we need to do:~1*32 + 1*16 + 1*4 = 52~We will in the other places with 0:| 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 ||  32 |  16 |   8 |   4 |   2 |   1 ||   1 |   1 |   0 |   1 |   0 |   0 |~52 base 10 = 110100 base 2~*** Using the division method:There is another way to convert decimal to binary.We divide the number in decimal by the vase value for the base to which we want to convert.#+begin_src python52 / 2 = 26, R=026 / 2 = 13, R=013 / 2 = 6, R=16 / 2 = 3, R=03 / 2 = 1, R=11 / 2 = 0, R=1#+end_srcThe binary representation of 52 base 10 is 110100. which is the remainders from bottom to top written from left to right.*** Converting from binary to decimalThe process is reversed to convert binary to decimal.E.g: 1010111 base 2 = ? base 10| 2^6 | 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 ||  64 |  32 |  16 |   8 |   4 |   2 |   1 ||   1 |   0 |   1 |   0 |   1 |   1 |   1 |The same process works for any base:E.g 320 base 5 = ? base 10| 5^2 | 5^1 | 5^0 ||  25 |   5 |   1 ||   3 |   2 |   0 |*** HexadecimalBase 16 is known as hexadecimal, or hex for short.Hexadecimal is used a lot in programming. For example when we specify the colour on a webpage:~#4FD1C5~This hex value compromises of 6 hex digits.A hexadecimal number is a number where there are 16 possible values for each position.| Decimal | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 || Hex     | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |  A |  B |  C |  D |  E |  F |**** How do we represent the decimal value 16 in hex?Just like in binary and decimal. When we run out of digits we move to the next place.The biggest value we can represent in a single digit is 15 (F). To represent 16, we have to move to the next place, so we have 10:| 16^1 | 16^0 ||   16 |    1 ||    1 |    0 |~16 base 10 = 10 base 16~**** Converting from decimal to hex435 base 10 = ? hex#+begin_src python435 / 16 = 27, R = 3            327 / 16 = 1, R = 11             B1 / 16 = 0, R = 1               1#+end_srcSo we get 1B3. Why B? Because in hex, the digit for 11 is B.**** Converting from hex to decimalOften hex numbers are written with a preceding 0x like this:0xBEEF = ? base 10| 16^3 | 16^2 | 16^1 | 16^0 || 4096 |  256 |   16 |    1 ||    B |    E |    E |    F |~11*4096 + 14*256 + 16*14 + 15*1 = 48879~**** Converting between hex and binaryBecause 16 is a power of 2, we can take a shortcut to convert between hex and binary.Because 16 = 2^4, any number we can express in 1 hex digit can be expressed in 4 binary digits:| decimal | hexadecimal | binary ||---------+-------------+--------||       0 |         0x0 |   0000 ||       1 |         0x1 |   0001 ||       2 |         0x2 |   0010 ||       3 |         0x3 |   0011 ||       4 |         0x4 |   0100 ||       5 |         0x5 |   0101 ||       6 |         0x6 |   0110 ||       7 |         0x7 |   0111 ||       8 |         0x8 |   1000 ||       9 |         0x9 |   1001 ||      10 |         0xA |   1010 ||      11 |         0xB |   1011 ||      12 |         0xC |   1100 ||      13 |         0xD |   1101 ||      14 |         0xE |   1110 ||      15 |         0xF |   1111 |this means to convert from hex to binary, we can just consider one hex digit at a time, and convert each to 4 binary digits:0x4E2A = ? binary|    4 |    E |    2 |    A || 0100 | 1110 | 0010 | 1010 |~0x4E2A = 0100 1110 0010 1010~likewise to convert from binary to hex, we can convert every 4 binary digits to a single hex digit.1110    0001    00010 binary = ? hex| 1110 | 0001 | 0010 ||    E |    1 |    2 |What if we don't have a multiple of 4 binary digits?Start from the end of the number to create groups of 4 - add leading zeros if you have to.~1101111 binary = ? hex~~1101111 => 110 1111 => 0110 1111 => 6F~**** Convert from one non-base 10 to another1. Convert 48 base 9 to decimal:   We multiple and add:   ~58 base 9 = 5*9 + 8*1 = 45 + 8 = 53 base 10~2. Convert 53 base 10 to base 5:  To convert to base 10 we divide and keep track of the remainders:  #+begin_src python53 / 5 = 10      R = 310 / 5 = 2      R = 0= 203 base 5  #+end_src**** Hexadecimal representaiton of colour:We represent colour in web development with hex values.#RRGGBBE.g #0122FF - what are the colour values for each component in decimal?| #   |         RR |         GG | BB           || #   |         01 |         22 | FF           || rgb | 0x16 + 1x1 | 2x16 + 2x1 | 15x16 + 15x1 || rbg |          1 |         34 | 255          |** Week 2- Methods, Composition & Debygging*** MethodsMethods are functions defined in side of a class. These functions are isntance methods. They belogn to the instance and not the class.Example:#+begin_src pythonclass Book:    def __init__(self,title,author):        self.title = title        self.author = author    def print_information(self):        print(f"Title: {self.title}, Author: {self.author}")#+end_srcIn this example the Book class will take two arguments during instantion to set the title and author instance atributes.The instance method ~print_information~ will print out the values of the title and author instance attributes.Instance methods automatically include a reference to itself as the first argument in the method.so we can do something like this:#+begin_src pythonboot_1 = Book("Harry Potter", JK Rowling)book_2 = Book("The Way of Kings", "Brandon Sanderson")book_1.print_information()book_2.print_information()#+end_srcWrite the method inside the class -Classes and objects are really good at keeping /state/.If one method is changed the values and the rest of the methods would be able t oaccess the new data as well.Example:#+begin_src pythonclass Book:    def __init__(self, title, author):        self.title = title        self.author = author    def print_title(self):        print(f"Title: {self.title}")    def uppercase_title(self):        self.title = self.title.upper()scary_book = Book("it", "Steven King")scary_book.print_title()scary_book.uppercase_title()scary_book.print_title()#+end_src*** CompositionClasses and objects structure our code in an understandable and reusable way.Consider example of building a quiz:What objects make up a quiz? - quiz, question.The question class above tracks 3 attributes and returns a boolean for whether a guess is right or wrong.#+begin_src pythonclass Question:	def __init__(self, content, options, answer):		self.content = content		self.options = options		self.answer = answer	def is_correct(self,guess):		return guess == self.answerclass Quiz:	def __init__(self,title):		self.score = 0		self.current_question = 0		self.questions = []		self.title = title	def add_question(self,question):		self.questions.append(question)		print(self.questions)	def ask_question(self):		question = self.questions[self.current_question]		print(question.content)		for option in question.options:			print(f"-{option}")		guess = input("What is your guess? \n")		if (question.is_correct(guess)):			self.score += 1self.current_question += 1animal_quiz = Quiz("Do you know your animals???")question_1 = Question(	"Which is the heaviest animal?",	["lion", "elephant", "hippo"],	"elephant")question_2 = Question(	"What is the shortest animal?",	["squirrel", "meerkat", "crocodile"],	"squirrel")animal_quiz.add_question(question_1)animal_quiz.add_question(question_2)print("Welcome to the quiz")print(animal_quiz.title)print("Good luck")while animal_quiz.current_question < len(animal_quiz.questions):	animal_quiz.ask_question()print("Quiz complete")print(f"Your score was {animal_quiz.score}/{len(animal_quiz.questions)}")#+end_src*** DebuggingPython built-in debugging is named pdb. There are several ways to use it.The first way is to run your program with the pdb module:~python -m pdb main.py~This will enter debug mode that allows us to issues commands as our code is being executed.Useful commands:s - step to the next linen - continue execution until the next line in a function is reched or returnedc - continue until a breakpoint is reached.l - list where you are currently at in the source codeq- quit.Another way to debug is to set /breakpoints/. To set breakpoints.1. import pdb.2. use ~pdb.set_trace()~ to set a breakpoint.More info: docs https://docs.python.org/3/library/pdb.html*** Boolean LogicBoolean logic is what computer science is based on at a fundamental level.At a basic level booglean logic consists of boolean relations such as AND, OR and NOT - applying those relations to statements.Boolean algebra is a branch of mathematics that involves true or false values - typically denoted as T or 1 for true and F or 0 for false.**** Boolean relations and opertorsType types of boolean relations: identity and negation.- identity means that true is true and false is false.- Negation gives the opposite of a boolean value. Ways we can express negation with operators include: ~!p, not p, ~p, ¬p~*****  Binary relations and operatorsWe will focus on these three binary relations:| Operations | Operators    ||------------+--------------|| AND        | AND, ^, ., & || OR         | OR, ∨, +, ∥  || XOR        | XOR, ⊕, ⊻    |AND : both values must be true to evaluate as true.OR : At least one value must be true to evaluate as true.XOR : Exactly one value must be true to evaluate as true.***** Conditional relations and operationsThese are if-then type operators, and we will look at two of them:Implication: if p is true then q is true. The operator used is ⇒ or →.p ⇒ qThe trickiest partk of implication is that it says nothing about when p is not true. That is - if p is false q can be either true or false and the implicaiton is still true.Implication is only false when p is true and q is false!|---+---+-----|| p | q | p⇒q ||---+---+-----|| T | T | T   || T | F | F   || F | T | F   || F | F | T   ||---+---+-----|An example of implicaiton is a statement like: "if it is raining i will bring an umbrella."The implication is only false if it is raining and I do not bring an umbrella. If it is not raining it is still true whether i bring an umbrella or not.***** EquivalenceEquivalence says that q is true if and only if p is true. The operator used is ⇔,  ≣, or ⟺p ⟺ q, with equivalence either both p and q must be true or both p and q must be false.| p | q | p ⟺ q ||---+---+-------|| T | T | T     || T | F | F     || F | T | F     || F | F | T     |An example of equiavlence is a statement like: "I will go to the movies if and only if it is Tuesday." , "If it is Tuesday, I go to the movies. If it is not Tuesday, I do not go to the movies."***** Bitwise logical operationsBitwise operations apply conditional operations on each bit in two binary numbers.Example: 1101010 & 1011001                  1101010             1101010               1101010AND   1011001   OR    1011001  XOR  1011001------------------------------------------------      1001000         1111011       0110011***** Bitwise operations and other basesIf the numbers are not specifed in base 2, you have to then first change them to bsae 2, then apply the operation. After the bitwise operation, covert back to the original base.***** Logic statements**** Networking Fundamentals***** Local Area NetworkRouters: hardware to connect our digital devices to the internetLAN: Local area network, ability for our devices to talk with one another in a small area.***** MAC, IP & DHCPA device connects to toher devices through a /network interface card/ or NIC.NIC's are given random (mostly) unique MAC address by the manufacturer who made it. The MAC address helps the router identify a device within a network.The IEEE (Insitute of Electrical and Electronics Engineers) assign blocks of MAC addresses to different vendors as required.An IP address is a routable, logical adress - like a mailing address telling us where to find you.IP address can only indicate where you are, not who you are.IPv4 addresses are made up of a set of 4 numbers between 1 and 254.The difference between a private and public IP adress is similar to the difference between a house on a street and a gated community.*****not P or R1 or 1 -> 00 or  1 -> 0 ()1 or 0 - > 1 (TRUE)0 or 0 -> 1 (TRUE)** Week 3 - Inheritance, Set Theory*** InheritanceWhen one class inherits from another - it receives all the other attributes and methods from the other class.#+begin_src pythonClass Employee:    def __init__(self, first_name, last_name, salary):        self.first_name = first_name        self.last_name = last_name        self.salary = salary    def fullname(self):        return f"{self.first_name} {self.last_name}"    def give_raise(self, amount):        self.salary += amount#+end_src#+RESULTS:This works but is not specific enough. Ex. There are many different kinds of employees that we want to keep track of.You could add an attribute to eh Employee class - but we want unique attributes and methods to be avalible for managers that we dont want for other employees.This is best done through a unique class for each different kind of employee.  - This is where inheritance comes in handy.#+begin_src pythonclass Manager(Employee):   passnew_manager = Manager("Sally", "Browner", 100000)new_employee = Employee("Alex", "Holder", 55000)print(new_manager.fullname())print(new_employee.fullname())#+end_srcIn this example - the Manager class is a clone of the Employee class. This is known as implicit inheritance.When we instatiate a new Manager it will look for a ~__init__~ method. If it does not find one it will look into a class that this one inherits from.In this case this is the method resolution order: Manager -> Employee -> builtins.object.**** Overiding in A SubclassIf we define a method inside the Manager class then the Manager class will have unique functionality that is not in the Employee class.We can also overwrite methods that we have inherited from. All we need to do is define a method with the same name in the Manager class.**** Altered Inheritance & SuperThis is when we want to use some of the functionality from the method we inherited but we just want to change some things.#+begin_src pythondef __init__(self, first_name, last_name, salary, department):        super().__init__(first_name, last_name, salary)        self.department = department#+end_srcIn this example we use the ~__init__()~ method on from Employee class to set first_name, last_name and salary,**** Multiple InheritanceThe ability ot inherit functionality from more than one class.#+begin_src pythonclass Mammal:    warm_blooded = True    lays_eggs = Falseclass Duck:    lays_eggs = Trueclass Platypus(Mammal, Duck):    pass#+end_srcIn this example the Platypus class is inheriting properties from both the Mammal and Duck classes.What happens if both classes have the same property?The value will be according to the order in which they are called - in this case: Mammal -> Duck.*** Set TheoryA set is a collection with no repeating numbers. This lesson will teach the syntax and operations associated with sets.- Natual Numbers (N): Counter numbers 1,2,3,4,5 and so on- Whole Numbers (W): and Natural Numbers- Intergers (Z): {..., -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, ...}*** Set Examples:A set is just a collection of unique values in some domain of values. Example:#+begin_src pythonM = {'progressive','classical','rap','hiphop', 'low-fi'}#+end_srcWe could list the elements of M using a variable. this is like a for loop.S = {x | x ∈ N, x < 5, x mod 2 = 0 }This rules after the pipe can be chained togoether - indiciating that x must meet multiple conditions. In the above example:- x is a natural number (natural numbers are in the domain for S)- x is less than 5- x mod 2 = 0 (or x is divisible by 2)Remember: sets contain unique values - theres no repeated values in a set. E.g.: Considert the string " My Favourite colour is purple" -> set = {“m”, “y”, “f”, “a”, “v”, “o”, “u”, “r”, “i”, “t”, “e”, “c”, “l”, “s”, “p”}*** Set Operations****** Union:    the union of two sets contains all of the elements in either set. it is the equivalent to OR in boolean logic.Here is an example:A = {1,2,3,4} , B = {3,4,5,6}A ∪ B = {1,2,3,4,5,6}Python example:#+begin_src python :results outputset1 = {'Hi', 'Bonjour', 'Hola', 'Nǐn hǎo'}set2 = {'Hallo', 'Ciao', 'Privet', 'Yā, Yō'}print(set1 | set2)print(set1.union(set2))#+end_src#+RESULTS:*** IntersectionThe interesection of two sets contains only the elements that are in both sets. It is similar to AND in boolean logic.Here is an example:A = {1,2,3,4} B = {3,4,5,6}A ∩ B = {3,4}Python Example:#+begin_src python :exports resultsset1 = {'Hi', 'Bonjour', 'Hola', 'Nǐn hǎo', 'Hallo'}set2 = {'Hallo', 'Ciao','Hola', 'Privet', 'Yā, Yō'}print(set1 & set2)print(set1.intersection(set2))#+end_src#+RESULTS:*** DifferenceThe difference contains all elements in one set that are NOT in the other set (the elements in one set take away the elements in another second set).Here is an example:A = {1,2,3,4} B = {3,4,5,6}A - B = {1,2}B - A = {5,6}Python example:#+begin_src pythonset1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}set2 = {1, 2, 4, 6, 9}print(set1 - set2)print(set1.difference(set2))#+end_src*** Symmetric DifferenceElements that are in one set or the other but not in both. Simialr to exclusive OR.Here is an example:A = {1,2,3,4} B = {3,4,5,6}A ⊕ B = {1,2,5,6}Python example:#+begin_src python :results outputset1 = {4, 5, 6, 7, 8, 9, 10}set2 = {4, 6, 9, 14, 16, 22}print(set1 ^ set2)print(set1.symmetric_difference(set2))#+end_src#+RESULTS:: {5, 7, 8, 10, 14, 16, 22}: {5, 7, 8, 10, 14, 16, 22}#+begin_src python :results outputprint("hello")#+end_src#+RESULTS:: hello#+begin_srcprint("hello")#+end_src** Week 4 - Cyber - OSI - Docstrings-*** Cyber and the OSI Model*** DocstringsDocstrings are short summaries that we include in our code to explain what a given thing is and how it works.When a user uses the help() function on that module, class, function or object - the docstring will appear as output.To create a docstring, we just put a string in triple-quotes right at the start of our code. Here's and example with a function:#+begin_src python :results outputdef my_function():    """A function to demonstrate docstrings."""    print("ran my_function successfully!")print(help(my_function))#+end_src#+RESULTS:: Help on function my_function in module __main__::: my_function():     A function to demonstrate docstrings.:: NoneThe same can be done for modules, but note that we need to put the docstring in even before we perform imports.Docstrings can be written any way you like but here are several specifications :- reST (re-structrued text) is the most dominant, since it's recommended by the Python devs ,https://www.python.org/dev/peps/pep-0287/- Another option is Google's specification:Google's specification  - https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings*** DecoratorsDecorators work by exploiting the fact that functions are technically objects.  - to run a function you have to call its name, followed by brackets:~my_function()~if  you forget to put the brackets you get an error like:~<function my_function at 0x7ff45555x2333>~That is python returning a function object to you, referenced by its location in memory.You can turn function in as an argument to another function.  - This lets you do all kinds of things.In particular it lets you manipulate how functions work and what they output. This is called decoration. The function you feed in as an argument is said to be decorated by the function you feed it into. In Python once you have a working decorator function, you can decorate a given function using the following syntax:#+begin_src python :results output@some_decorator_functiondef function_to_be_decorated():    pass#+end_src**** Class MethodsSo far we have been defining methods inside our classes using instance methods.These are  methods that take a reference to the instance as the first argument. This is normally denoted by the word /self/.For Example:#+begin_src python :session :results outputclass Hero():    boost = -1.5    def __init__(self,name,power_level):        self.name=name        self.power_level = power_level    def beserk_mode(self):        self.power_level = self.power_level * self.boost#+end_src#+RESULTS:: >>>Here we have a class to create a new instance of "heroes". Both of our methods are instance methods since we are passing in a reference to instance.#+begin_src python :session :results outputbatman = Hero("Bruce Wayne", 100)print(batman.power_level)batman.beserk_mode()print(batman.power_level)#+end_src#+RESULTS:: 100: 150.0This works but what if you wanted a method to perform logic on the class directly and not on a specific instance:For example, if we wanted to set a ne value for the boost class attribute ./Class Method/  - In python to be able to use a class method we are going to have to use a built-in decorator  @classmethod. This will turn a method defined in our class to a class metho and not an instance method.#+begin_src python :results output :session xclass Hero():    boost = 1.5    def __init__(self, name, power_level):        self.name = name        self.power_level = power_level    def beserk_mode(self):        self.power_level = self.power_level * self.boost    @classmethod    def set_boost(cls, value):        if value <= 2 and value > 0:            cls.boost = value#+end_src#+RESULTS:After tusing the @classmethod decorate notice that the first parameter for the method is cls and not self. This is common convention for referencing the class.We cannot use the keyword class because it is a reserved word!Now if we want to use our method we just call it on the class itself.#+begin_src python :results output :session xHero.set_boost(1.75)batman = Hero("Bruce Wayne",100)print(batman.power_level)batman.beserk_mode()print(batman.power_level)#+end_src#+RESULTS:: 100: 175.0****  Static MethodsWhat if you have a method that makes sense to group with our hero class but doesn't reply on any instance of hero and doesnt need to access the class .This is known as a /static method/ .Example: we want a method that gives us a list of all the different guilds a hero may belong too. This isnt information that relies on the Hero class or an instance of Hero but logically it makes sense to group it together with a Hero.So we will creatre a static method that will return this info with @staticmethod decorator#+begin_src python :results output :sessionclass Hero():    @staticmethod    def list_guilds():        return [            "Azure Dragons",            "White Cloaks",            "Mighty Warriors"        ]#+end_src#+RESULTS:#+begin_src python :results output :sessionguilds = Hero.list_guilds()print(guilds)#+end_src#+RESULTS:: ['Azure Dragons', 'White Cloaks', 'Mighty Warriors']**** Property Decorators***** GettersIn other programming languages these are often called getters and setters.They are very useful if we want to have even more control with our attributes.Consider our Hero example:#+begin_src python :results output :session xclass Hero():    def __init__(self, name, power_level):        self.name = name        self.power_level = power_level        self.chant = f"I am {name}, hear me roar!"hero_1 = Hero("Thorg",1000)print(hero_1.chant)#+end_src#+RESULTS:: I am Thorg, hear me roar!We have added the 'chant' functionality - but what if we wan to change the change the Hero's name?#+begin_src python :results output :session xhero_1.name = "Marsh"print(hero_1.chant)#+end_src#+RESULTS:: I am Thorg, hear me roar!The name is scuffed. it didn't get updated.Using getters is better, it allows us to have method functionality but with attribute like syntax. We just need to add the @property decorator to the method.!! WHEN  @PROPERTY is USED CHANT IS NO LONGER A METHOD !!#+begin_src python :results output :session xclass Hero():    def __init__(self, name, power_level):        self.name = name        self.power_level = power_level    @property    def chant(self):        return f"I am {self.name}, hear me roar!"#+end_src#+RESULTS:#+begin_src python :results output :session xhero_1 = Hero("Thorg", 1000)print(hero_1.chant)#+end_src#+RESULTS:: I am Thorg, hear me roar!#+begin_src python :results output :session xhero_1.name = "Marsh"print(hero_1.chant)#+end_src#+RESULTS:: I am Marsh, hear me roar!*****  Setter#+begin_src python :results output :session xclass Hero():    def __init__(self, name, power_level, town, country):        self.name = name        self.power_level = power_level        self.town = town        self.country = country    @property    def chant(self):        return f"I am {self.name}, hear me roar!"    @property    def birthplace(self):        return f"{self.town}, {self.country}"    @birthplace.setter    def birthplace(self, value):        town, country = value.split(", ")        self.town = town        self.country = country#+end_src#+RESULTS:#+begin_src python :results output :session xhero_1 = Hero("Thorg", 1000, "Emberton", "Sertha")print(hero_1.birthplace)hero_1.birthplace = "Mahogany, Buelmin"print(hero_1.town)print(hero_1.country)print(hero_1.birthplace)#+end_src#+RESULTS:: Emberton, Sertha: Mahogany: Buelmin: Mahogany, Buelmin** Week 5 - Matrix, Graphs, Cyber, JSON, HTTP, JSON*** Matrix MathsA matrix is a 2d array of numbers. Common data structure in computer science - for representing collections of related values.**** Matrix Representation and AccessWe declare a matrix like this:~matrix = [[1,2,3],[4,5,6]]~The dimensions of a matrix are expressed as #rows x  #columns. The example above is 2 rows and 3 columns. We say that is a 2 x 3 matrix.We index the matrix using index notation. For example - ~matrix[0][0]~ is ~1~To reference the value 5?~matrix[1][1] = 5~The Numpy module is most commonly used for matrix operations.#+begin_src python :results output :session matriximport numpymatrix1 = numpy.array(    [[1, 2],     [6, 4]])matrix2 = numpy.array(    [[3, 5],     [8, 12]])#+end_src#+RESULTS:**** Matrix AdditionAdding matrices requires that they have the same dimensions. The same number of rows and columns.Just add the elements at each position and store the sum in the same position.#+begin_src python :results output :session matrixprint(numpy.add(matrix1, matrix2))print("hello")#+end_src#+RESULTS:: [[ 4  7]:  [14 16]]: hello**** Matrix SubtractionSimilar to addition. dimensions must be the same otherwise you simply subtract values in each position.****  Scalar multiplicationScalar means a number (as opposed to a vector). Scalar multiplaces involves multiplying a number by a matrix. The resulting matrix has the same number dimensions as the source matrix, each with value multiplied by the scalar#+begin_src python :results output :session matrixprint(matrix2)print("")print(numpy.multiply(4, matrix2))print("")print(numpy.multiply(matrix1, matrix2))#+end_src#+RESULTS:: [[ 3  5]:  [ 8 12]]:: [[12 20]:  [32 48]]:: [[ 3 10]:  [48 48]]**** Matrix Multiplication (dot product)In order to multiple two matrices, the number of columns in the left matrix must match the number of rows in the right matrix.The resulting matrix will have the same number of rows as the left and the same number of columns as the right:|  1 |  3 |   | 0 | 0 |   | x | x | x || -1 |  0 | x | 2 | 1 | = | x | x | x ||  2 | -2 |   |   |   |   | x | x | x |[3 x 2] x [2 x 2] = [3 x 2]Multiplication Process:1. First ROW of first matrix ,multiple each value by the values in the first COLUMN in the right matrix, and add the products to form the result for the first row and first column [0][0] in the result matrix:| *1* | *3* |   | *0* | 0 |   | 1x0 + 3x2 | x ||  -1 |   0 | x | *2* | 1 | = | x         | x ||   2 |  -2 |   |     |   |   | x         | x |2. Next do the same process with the first ROW of the first matrix and SECOND COLUMN of the right matrix.| *1* | *3* |   | 0 | *0* |   | 1x0 + 3x2 | 1x0 + 3x1 ||  -1 |   0 | x | 2 | *1* | = | x         | x         ||   2 |  -2 |   |   |     |   | x         | x         |1. Repeat the process for all of the rows of the first matrix.   #+begin_src python :results output :session matrixprint(numpy.dot(matrix1,matrix2))   #+end_src   #+RESULTS:   : [[19 29]   :  [50 78]]****  Transpose of a MatrixTranspose of a matrix flips it over its diagnol. The columns of the matrix become the rows of the transposed matrix , the rows become the columns.#+begin_src python :results output :session matrixprint(numpy.transpose(matrix1))print(matrix2.T)#+end_src*** GraphsGraphs are a way of abstracting the structure or layout of something. It uses the concept of nodes and edges, where nodes are connected by edges to create webs of connections.This is how map programs and algorithms are able to abstract maps, it is how 3d points of  computer graphics are connected to each other and how google's search algorithm PageRank was able to rank pages.**** NodesThe node is an individual point, like a city street corner or a website. or the hyperlink which points at the website. we can represent this as:e(vw)This states that v and w are nodes and e is an edge connecting v to w. Another way of representing this is:(v,w) ∈ E ∈  means 'in' or 'element of' This says that among all the edges there are (the set E) two nodes which are connected are v and w. E in this case would contain a pair to represent every connecting edge which exists in a graph.**** Directed vs undirected graphs :ATTACH::PROPERTIES::ID:       98bcf2ac-4d19-4204-9272-e3c3807fe643:END:In a directed graph (aka digraph) there are arrows pointing the direction of the edges.[[attachment:_20210821_151518screenshot.png]]There is a connection from A to C, but not from C to A.For a directed graph, we can say: (v,w) ∈ E ⇏ (w,v) ∈ E This means that there is an edge (v,w) in the set of all edges (E), it does not imply that there is also an edge (wv) in the set of edges (E). #+begin_src python :results fileimport networkx as nximport matplotlib.pyplot as pltmy_graph = nx.DiGraph()my_graph.add_nodes_from(["A", "B", "C"])my_graph.add_edge("A", "B")my_graph.add_edge("B", "C")nx.draw(my_graph)fname='img/dimg.png'plt.savefig(fname)return fname #+end_src #+RESULTS: [[file:img/dimg.png]]***** Undirected GraphIn an undirected graph, there are no arrows. Each edge is bidirectional, meaning it is possible to get from either node to the other on an edge of the graph.(v,w) ∈ E ⇒ (w,v) ∈ E#+begin_src python :results fileimport networkx as nximport matplotlib.pyplot as pltmy_graph = nx.Graph()my_graph.add_nodes_from(["A", "B", "C"])my_graph.add_edge("A", "B")my_graph.add_edge("B", "C")nx.draw(my_graph)fname='img/nimg.png'plt.savefig(fname)return fname#+end_src#+RESULTS:[[file:img/nimg.png]]**** Weighted and unweighted graphs :ATTACH::PROPERTIES::ID:       12a74b6f-24ab-4ea0-8dfc-6ff02571a044:END:A weighted graph has values on each edge indicating the cost of using that path between two nodes. This cost could represent anything - such as length of road or the amount of traffic or resistance on a connection.[[attachment:_20210821_163553screenshot.png]]Weights are used to find optimised paths between nodes in a graph.If no values are given on edges, the graph is unweighted.#+begin_src python :results fileimport networkx as nximport matplotlib.pyplot as pltmy_graph = nx.DiGraph()my_graph.add_nodes_from(["A", "B", "C"])my_graph.add_weighted_edges_from([("A","B",3), ("B","C",1)])pos = nx.spectral_layout(my_graph)nx.draw_networkx_nodes(my_graph, pos, node_size=700)nx.draw_networkx_edges(my_graph, pos, width=6)nx.draw_networkx_labels(my_graph, pos, font_size=20, font_family='sans-serif')nx.draw_networkx_edge_labels(my_graph, pos, font_size=10, font_family='sans-serif')plt.axis('off')fname='img/dwimg.png'plt.savefig(fname)return fname#+end_src#+RESULTS:[[file:img/dwimg.png]]**** TreesA tree is a type of graph with specific properties. In a tree graph every node has a single parent (except the root). There are no loop or cycles in a tree.The file system of a computer is a tree.Trees can be useful data structures in programming. A classic example is a binary tree, which can be used for binary search.***** Binary TreeIn a binary tree, each node has at most two children. The other important property of a binary tree is that the left child of a node will always be smaller than that node, and the right child will always be lager.**** Adjacency Matrix :ATTACH::PROPERTIES::ID:       32088f9b-0851-4cb0-8dd9-8c1b37fe583f:END:An adjacency matrix , is just another way to express data represented in a graph. Each node is represented as a row and column in the matrix and where there is an edge connecting two nodes, a value is included in the matrix.[[attachment:_20210821_164318screenshot.png]]If the graph is weighted, instead of using '1' to indicate an edge between nodes, the weight is used instead.[[attachment:_20210821_164201screenshot.png]]**** Edge List :ATTACH::PROPERTIES::ID:       fc2c4877-5786-4c5d-a603-6601189fd18e:END:Another way to express the data in a graph is with an edge list. It is literally just a list of the graph edges.[[attachment:_20210821_164540screenshot.png]]If the graph is weighted the weights must be included.Example: G = [A2B, B2A, A3C, C3A, A4D, D4A, D5B, C2D, D2C]**** Dijkstra's AlgorithmThis algorithm is used to find the shortest path in a weighted graph between one node and every other node.Here are the steps, Starting with the source node:1. Mark it as the current node2. For each adjacent node, if travelling from the current node gives a shorter path than the one you have marked for that node, update the marked distane to that node. Otherwise make no change.3. Mark the current node as visited4. The next current node is an un-visited node that currently has the shortest distance (it doesn't need to be connected directly to the current node - you could backtrack)5. Repeat  steps 1-4 until all nodes are marked visited6. Starting from any destination node, the shortest path can be traced backwards to the source node.Dijkstra's algorithm is not appropriate to find the shortest path that visits all nodes or when there is no specific origin node given.**** The Shortest path that visits all nodes :ATTACH::PROPERTIES::ID:       33dba043-53db-4d7a-8e44-73ac15fefb82:END:Known as the travelling salesman problem. It is a suprisingly hard to solve in the general case.A brute force method is used to solve the problem. That is to find the shortest path, you can just consider all the paths and determine which one is shortest. Often the shortest path includes visiting the same node more than once.[[attachment:_20210821_165659screenshot.png]]*** Packet Capture :Cyber Security:**** OverviewThe act of observing and recording the network traffic. There are many ways to acomplish this.Analysing packet captures is a useful skill and a requirements for roles such as:- analyst- threat hunter- incident responder- penetration tester**** How its doneSpecialised hardware or software:wireshark, z , snort. tcp dump..**** Use Cases : Offensepen tester will use packet capture -> they may start passive reconnaissance.Or the tester may conduct man in the middle attacks -  this is done by automated tools.**** Use Case - DefenseSecurity analyst may be working alert queues - the analyst will check and troubleshoot issues according to their teams Standard Operating Procedure (SOP).E.g thei Analwayst may notrice the organisation Intrusion Detection System (IDS)therethis oai        d**** Wireshark Crash Course:https://www.wireshark.org/download/docs/Wireshark%20User%E2%80%99s%20Guide.pdfFilter TCP streams into human readable text.Carve out SSL certificates :Playback Intercepted VOIP calls.**** Wireshark Prac -thisHow many protocols: Statistics -> Protocol History.showmeustooocompanatorcomparWhat do you think the purpose of the ip address 10.0.0.11 is in the network?- communicates over port 8118 -  google tells us this is the default port for privoxy  is 13.107.4.50 a malicious IP address? why is it talking to us?- whois lookup reveal that this ip belong to Microsfot. thats where the cab files are coming from.  - Any other interesting things that stand out?    check the TCP stream of packet 53710:    - File: Export HTTP request. --> see downloads.****  Prac2:Protocol heireichary -> Telnet data -> Follow.bankwest*** JSONFiles hold plain text. Our programs interpret into something with meaningComputers follow a set of rules or syntax so it knows the meaning of the text.JSON - Javascript Object Notation is the most common way of giving meaning to data.#+begin_src python :results outputimport jsoncolours = ["red", "green", "blue"]json_colours = json.dumps(colours)print(json_colours)with open("data.json", "w") as data_file:    data_file.write(json_colours)with open("data.json", "r") as data_file:    raw_json = data_file.readline() #data is loaded as raw json (NOT PYTHON STRING)    colors = json.loads(raw_json) #Interpret JSON objects in pythonfor color in colors:    print(color)#+end_srcIn this example we use the JSON module's loads() function to interpret the JSON data in Python objects.Here is a table of Python data types and structures that the JSON module can handle encoding out of the box.|--------------------------------------+--------|| *Python*                             | *JSON* ||--------------------------------------+--------|| dict                                 | object || list,tuple                           | array  || str                                  | string || int,float,int- & float-derived Enums | number || True                                 | true   || False                                | false  || None                                 | null   ||--------------------------------------+--------|Whenever we encode a python data structure it is represented in JSON by a Javascript data structure equivalent.#+begin_notesBoth list and tuple are array in JSON.  -> Tuples -> JSON -> LIST.#+end_notes*** HTTPHyper Text Transfer Protocol is the main way out computers talk to each other over a wide area network (WAN).When a machine initialises the communication, A *Request* is made over HTTP and consists of 4 parts:1. Headers : Extra information known as meta information - ex sender address.2. Body : Where the data is located - usually in JSON3. URI : Destination of the request - either an IP address or a domain name.4. Verb / Action / Method : Gives context on what the receiver should do when they get the request:   - GET: read a resource   - POST: create a resource   - DELETE: destroy a resource   - PATCH: partially update a resource   - PUT : fully update a resourceWhen ever we type a URL into our web browser we are creating a HTTP GET request to retrieve a web page resource.With every request there will always be a *response*. All the parts you have a for a request are the same in a response execpt for the /verb/. Instead this is replaced with a *status code*.The status code will let us know if what we were trying to do worked or if something failed. There are lots of status codes but they are grouped into 4 main categories.200s - all good300s - redirection400s - you did something wrong500s - the machine receiving the request did something wrong.**** HTTP in PythonWe can make HTTP requests from all kinds of places including our python programs.#+begin_src python :results outputimport requestsresponse = requests.get("https://en.wikipedia.org/wiki/Pumpkin")print(response.status_code)#+end_src#+RESULTS:: 200So before we received the data back as plain text but sometimes we want to receive the data a raw machine readable bytes instead such as when we are downloading an image.#+begin_src python :results fileimport requestsresponse = requests.get("https://imgs.xkcd.com/comics/duty_calls.png")with open("image.png", "wb") as image:    image.write(response.content)return 'image.png'#+end_src#+RESULTS:[[file:image.png]]**** P*** APIsApplication Programming Interface is an interface that a user can access.A HTTP request is an example of an API accessing a web server.To know how to interface with a web app we need to read the docs:Here is the docs for a pokemon web api. https://pokeapi.co/docs/v2Most of the time whenever you encounter a portion of the URI that has { } surrounding it. That means you need to replace that part with custom information.#+begin_src python :results outputimport requestsimport jsonresponse = requests.get("https://pokeapi.co/api/v2/pokemon/bulbasaur/")pokemon = json.loads(response.text)print(pokemon["name"])#+end_src#+RESULTS:: bulbasaurWhen creating HTTP requests we need to read the docs to see what information we need for the request.From this API: https://rapidapi.com/apidojo/api/imdb8/. We need a little more in our request to get a response - ex. to get the actors/get-bio endpoint we need:- two items in our request header a. a value for ‘x-rapidapi-host’ b.  value for ‘x-rapidapi-key’we also need to pass a parameter with our request: a value for ‘nconst’What is an endpoint? - Endpoint is everything that comes after the main domain name and can also be defined as a *route*.#+begin_src python :results outputimport requestsimport jsonmy_headers = {    'x-rapidapi-host': 'imdb8.p.rapidapi.com',    'x-rapidapi-key': '427a520722mshf3e7fccec24699ap19c334jsna309860b504e'}params = {'nconst': 'nm0001667'}url = 'https://imdb8.p.rapidapi.com/actors/get-bio'response = requests.get(url, headers=my_headers, params=params)actor_info = json.loads(response.text)print(actor_info)code = response.status_codeprint(f"code: {code}")#+end_src#+RESULTS:: {'@type': 'imdb.api.name.bio', 'akas': ['Jonathan Rhys Myers', 'Jonathan Rhys-Meyers', 'Jonathan Rhys-Myer'], 'id': '/name/nm0001667/', 'image': {'height': 2208, 'id': '/name/nm0001667/images/rm1272017664', 'url': 'https://m.media-amazon.com/images/M/MV5BMGEwYzJhOTctNjZkMy00NTZjLWE3MTctNGU2ZGRmODNiZmNiXkEyXkFqcGdeQXVyOTQyNzIyMDM@._V1_.jpg', 'width': 1242}, 'legacyNameText': 'Rhys Meyers, Jonathan', 'name': 'Jonathan Rhys Meyers', 'birthDate': '1977-07-27', 'birthPlace': 'Dublin, Ireland', 'gender': 'male', 'heightCentimeters': 177.0, 'nicknames': ['Johnny', 'JRM'], 'realName': "Jonathan Michael Francis O'Keefe", 'spouses': [{'attributes': '(1 child)', 'current': True, 'fromDate': '2016', 'id': '/name/nm2475349/', 'name': 'Mara Lane'}], 'trademarks': ['His sense of fashion'], 'miniBios': [{'author': 'Skarlett', 'id': '/name/nm0001667/bio/mb0029736', 'language': 'en', 'text': 'Jonathan Rhys Meyers was born Jonathan Michael Meyers on July 27, 1977, in Dublin, Ireland, to Mary Geraldine (Meyers) and John O\'Keeffe, a musician. He and his family moved to County Cork, Ireland, when the actor was nearly a year old, and then, at the age of 3, his father left the family, leaving his mother to care for Jonny and his 3 younger brothers alone.\n\nRhys Meyers grew up with a tumultuous childhood and being permanently expelled from school at age 16. Happy to be out of school, he began spending time in a local pool hall where he was discovered by Hubbard Casting. The casting agents were talent-spotting for the David Puttnam production of War of the Buttons (1994), and asked Rhys Meyers to appear for an audition. After three days of auditions, however, he did not get the role, and Rhys Meyers gave up on his acting aspirations. Soon afterward, he received a call to audition for a national ad campaign for Knorr Soup, and though embarrassed by the attention from the ad, he soon found himself considered for a major film. His movie acting debut was a very small role in the film A Man of No Importance (1994), where his simple cast credit is as "First Young Man". His first lead role was in the film The Disappearance of Finbar (1996). During a 6-month postponement in production, he returned home to Cork and there received a call about the film Michael Collins (1996). He traveled to Dublin to meet with director Neil Jordan and successfully won the role of Collins\' assassin. Jordan wrote about his meeting with the actor, "I have found someone to play Collins\' killer. Jonathan Rees-Myers (sic), from County Cork, apparently, who looks like a young Tom Cruise. [He] Comes into the casting session with alarming certainty. Obviously gifted".\n\nRhys Meyers continued working constantly from that point and appeared in such films as The Maker (1997), Telling Lies in America (1997), and The Tribe (1998). Going on to film The Governess (1998), B. Monkey (1998), Titus (1999) and Ride with the Devil (1999), he has received critical acclaim for several performances, most notably as "Brian Slade" in Velvet Goldmine (1998), as "Steerpike" in the British mini-series Gormenghast (2000), and as a sympathetic football coach in Bend It Like Beckham (2002). Rhys Meyers is also a talented singer and musician, having performed his own vocals in Velvet Goldmine (1998) and appearing on the film\'s soundtrack. Rhys Meyers still resides in County Cork, Ireland.', 'userId': '/user/ur9667677/'}]}: code: 200*** SSHSSH allows ofr a secure connection between a client and server through a shell such as bash.OpenSSH is the industry standard for this.Once SSH is enabled on two machines you just have to type~ssh <username>@<ip address>~**** SSH KeysA more secure way that people use SSH is to have asymmetric encryption keys.To generate a key type: ~ssh-keygen~After generating a key we can transfer the key to a machine we want to SSH with using the following command:~ssh-copy-id <username>@<ip address>~After the key is added the machine is authenticted to SSH into.If we have multiple keys on the machine and need to specify a different key to use we use:~ssh -i ~/.ssh/id_rsa test@192.168.27.179~Another way to use ssh keys is ~ssh-agent~It needs a config file inside ~/.ssh :#+begin_srcHost *    PORT 22Host testbox    HostName 192.168.27.179    User test    IdentityFile /home/<profile>/.ssh/id_rsa#+end_srcwith a preconfigured file all we need to do is type:~ssh testbox~ to ssh into the machine.** Week6 Processes, SSH, Functions / Relations*** ProcessesProcesses are managed by the kernel. The kernels main job is to allocate memory and procesing power to a running process and then reclaiming those resources once the process is complete. A process can be thought of as any running program.Some processes are foreground meaning that the terminal is open and running that process, other processes are background processes meaning that the process continue to run even though there is no current interface connected to the process.the comannd ~ps~ and ~ps aux~ gives up a list of command and processes that are running.Secure Shell (SSH) - Allows us to create a secure connection between client and server through a shell such as bash.USER - The user the process belongs toPID - The id of the process%CPU - Percentage of CPU the process is using%MEM - Percentage of memory the process is usingVSZ & RSS - amount of virtual memory (don’t worry about it)TTY - terminal associated to the processSTAT - status codes (don’t worry about it)START - time the process what startedTIME - how long the process has been running forCOMMAND - the path to the command that was executed to start the process~top -o PID~  option wil sort the table  by the PID by the order that they have started. oIf you want to close a process used the ~kill <PID>~If you really want to force a process to kill is ~kill -9 <PID>~**** Foreground v BackgroundTo run a program in the background execute it with the ~&~ symbol. e.go#+begin_srcpython3 number_writer.py &#+end_src*** Functions / Relations (MATHS)A function describes how one set of values relates to another. A relation creates pairs of related values.A function is a special type of relation where for any input value, there is only one valid output. /All functions are relations, but not all relations are functions/.We use functions and relations to express relationship's  between entities. This gives us a way to express problems and solutions.**** RelationsDescribes the way some set of values relate to some other set of values.Example: pairing of a number with its square root. pairing people with their pet.Ellie has the cat Ronda -> (Ellie,Ronda)4 has the square root 2 -> (4,2)**** FunctionsFunctions are relations, that have the special property that each input has a *unique* output.A function with no input has more than one output.A mapping diagram is one way to express this property of function. Here are two mapping diagrams that represent functions:It is a requirement that each input has a single output.  The examples of relations above are not functions -> people may have two pets or numbers can have two roots.Function Example: A person and their date of birth. Or a Number and its square.We can represent a mathematical function as a graph that takes a value X and returns a value Y.A function can also be expressed as pairs of input/output values or (x,y) pairs. we cant write every possible pair so we can also express this functio nin shorthand as an equation:#+begin_exampley = x^{2}orf(x) = x^{2}#+end_example**** Domain and RangeA function has a domain and range.When we map a function over a set or list of values (like an array), we call it mapping the function over the set of values.The *domain* is the set of /all/ the *input* valuesThe *range* is the set of *output* values we get when we map the function over the valus in the domain over the input values. No need to list values twice.**** Relation Properties***** Reflexivity:~xRy iff x=y~~x=y => xRy~A relation says that X relates to Y if and only if *for every X* in the domain, the relation contains AT LEAST the pair (x,y). (May also relate to other elements)The relation *equality* or *equal to* is reflexive.A mathematical example of a reflexive relation is:~r(t,v) : t = v~#+begin_notesReflexivity means AT LEAST  X = Y in the specified domainInclusive of greater than or less than WITH ~equality~#+end_notes***** Transitivity:~xRy,yRz => xRz~A relation that pairs X with Y, and also pairs Y with Z, is only transitive if it pairs X with Z in the same way.If A relates to B and B relates to C, then C must relate D.Example: If 2 is less than 3, and 3 is less than 4, that implies that 2 is less than 4.Doesn't have to be TRUE#+begin_notesTransitivity means GREATER THAN or LESS THANNote in Python ->for (x,y) in range:    for (y,z) in range:will not work as intended. need to have seperate variables associated to each pair. e.gfor (a,b):    for(c,d):    if c==b:#+end_notes***** SymmetryA symmetric relation has the property:~xRy => yRx~A relation says that:  X relates to Y, can only be symmetric if Y also relates to X.#+begin_notesSymmetry means for (a,b) in R must always have (b,a) in R.#+end_notes***** Code Challenge:#+begin_src python :results output    def Is_reflexive(domain, mapping):    """A function to check if a relation is reflexive.    Args:        domain: the domain of the function as a set        mapping: the pairs of (input, output) of the function as a list    Returns:        A string, stating the result    """    # For each element in the domain.    for element in domain:        # Check that there is an element in the mapping which relates it to itself.        if not (element, element) in mapping:            return f"No, ({element}, {element}) not in R"    return "Yes"def Is_symmetric(mapping):    """A function to check if a relation is symmetric.    Args:        mapping: the pairs of (input, output) of the function as a list    Returns:        A string, stating the result    """    # For each element in the mapping    for (x, y) in mapping:        # Check that it's mirrored reverse is also in the mapping.        if not (y, x) in mapping:             return f"No, ({y}, {x}) not in R"    return "Yes"def Is_transitive(domain, mapping):    """A function to check if a relation is transitive.    Args:        domain: the domain of the function as a set        mapping: the pairs of (input, output) of the function as a list    Returns:        A string, stating the result    """    # For each pair of elements in the mapping, (a, b) and (c, d)    for (a, b) in mapping:        for (c, d) in mapping:            # If b is the same as c            if b==c:               # Check that there is a third element in the mapping, (a, d)               if not (a, d) in mapping:                   return f"No, ({a}, {d}) not in R"    return "Yes"#+end_src**** Cybersecurity Demystifing Attacks***** VirtualisationVirtualisation is hardware emulationAmazon run their custom Linux Build -There are security concerns - you dont own the hardware. Some data needs to be owned.VMware - paidOracle VirtualBoxVirtualisation relies on HyperVisor. Windows has their own Hypervisor.'Dog Fooding' -> runs the code that you run.****** Snapshots.A virtual machine at a particular state - can be saved and loaded****** MigrationVirtual Machines can easily be copy and pasted.****** DockerIs Platform as a Service:Code can be executed within a docker container anywhere.****** EmulationVirtualisation access hardware directly, while emulation requires a software bridge to interact with the hardware.****** Attackers have used VMTo maintain persistence and exploit the system.E.g : ShadowBunnyRandsomware Operators have worked out that there is value in encrypting virtual machines.***** Dynamic Analysis****** Golden Rules1. Every malware must be considered dangerous and worthy of your focused attention2. All samples must be run in a clean virtual env and never on your local host3. The env must be isolated from the internet4. Your env must be able to preserve evidence to make the risk worthwhile.****** LinksWindows 7 Enterprise SP1: https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/Download any Win7 image - the version of IE is not important in these test casesRegshot: https://sourceforge.net/projects/regshot/ProcMon: https://docs.microsoft.com/en-us/sysinternals/downloads/procmonFakeNet-NG: https://www.fireeye.com/services/freeware/fakenet-ng.htmlWireshark: https://www.wireshark.org/Memoryze: https://www.fireeye.com/services/freeware/memoryze.htmlAnalysis Tools: Redline :  https://www.fireeye.com/services/freeware/redline.html****** HOUDINI RATMD5 Checksum: 81c153256efd9161f4d89fe5fd7015bcH-worm is a VBS (visual basic script) inTake shot of registry before and after. During installation 25 reg keys were added and 250 values.This is the location of a persistence mechanism for the RAT in the registry:HKU\S-1-5-21-3463664321-2923530833-3546627382-1000\Software\Microsoft\Windows\CurrentVersion\Run\server:"wscript.exe //B "C:\Users\IEUser\AppData\Local\Temp\server.vbs"It is also placed in the startup: C:\Users\IEUser\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\server.vbsPID : Process IdentifierWe could decode the server.vbs and infer its functionality by reading its code, but that has already been done here: https://www.fireeye.com/blog/threat-research/2013/09/now-you-see-me-h-worm-by-houdini.htmTrack the malware through the PID - ProcMon.Server.vbs creates a PID (1680) and puts itself into memory. Runs check on what i can and cannot access.Creates child process (PID 2132) of wscript.exe to do its bidding.****** WANNACRYRandsomware Example.EternalBlue SMB Vulnerability - exploit in windows filesharing.Wormable through SMB filesharing.DarkNet Stories - PodCast.Once executed starts encrypting the drive.Every directory will have the files:● @Please_Read_Me@.txt● @WanaDecryptor@.exeWannaCry hsa created 19 registry entiried and added 40 entries and modified 43 entries.Track via its PID: put in memory,It uses legitimate windows crypto modules to encrypt data.Once it is done locally, then it will pivot to SMB file shares to spread out to other hosts on the internet.WannaCry had a hardcoded kill-switch : Reach out to domains:- www[.]iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea[.]com- www[.]ifferfsodp9ifjaposdfjhgosurijfaewrwergwea[.]comIf WC could connect to these domains on install it would not encrypt any files.****** EternalBlueExploit developed by the U.S NSA and was in use for 5 years before it was publically known.Vuln exists because SMBv1 mishandles specially crafted packets from remote attackers, which allows the attacker to execute code.EternalBlue has a Metasploit module - now anyone can hack like a pro.How to use: EternalBlue:Load metasploit, select EternalBlue.Payload will be a meterpreter reverse TCP shell.BufferOverflow -> Reverse Shell.hashdump -> crack passwords offline.No evidence in the registry.Some network activity - (wireshark) - PSH >> Persistant Shell.No artefacts left on host system.Binaries: PID was running exploit systems because it spawned a child process for the Meterpreter shell.****** SummaryWe looked at three malware tools.Documenting and understanding an attack is important.VMs can be used for Dynamic Analysis of Malware - Snapshots are importantMalware is called malicious software fora reason, treat it with respect.** Week 7 - Testing*** Automated TestingWith long code it may be difficult to keep track of all tests required of the code.Tests are written in different files and import the functions we are wanting to test.#+begin_src python :results outputfrom main import addresult = add(1,5)if result != 6:    raise Exception("Add did not bring back 6 when given 1 and 5")#+end_srcThis test file can be ran to test the functionality off the add function. If someone was to change the function - we can run the test can be notified that the change has broken the code.This is useful because we test the OUTCOME - not just the syntax. The code could be changed such that the syntax is correct but its functionality is not.Tests make sure that the code and functionality we have written in the past remains the same in the future of our application.**** Unittest ModuleThis tool streamlines the testing process. Need to learn the vocab used in the module.*testrunner* - find any test programs that you have an run them for you.~python -m  unittest~the module will run any file with the name ~test.py~.*test case* :  an individual unit of testing.The unittest module comes with a class we can use to set up a test case.Use test case by calling TestCase class from unittest. Define class. Define functions. Syntax:#+begin_src python :results outputclass TestMathFunctions(unittest.TestCase):    def test_add(self):#+end_src**** AssertionsLets us preform a test --> Expected result of call. Tell me if it is not.| Method                   | Checks that         | new in || assertEqual(a,b)         | a == b              |        || assertNotEqual(a,b)      | a != b              |        || assertTrue(x)            | bool(x) is True     |        || assertIs(a,b)            | a is b              |    3.1 || assertIsNot(a,b)         | a is not b          |    3.1 || assertIsNone(x)          | x is None           |    3.1 || assertIsNotNone          | x is not None       |    3.1 || assertIn(a, b)           | a in b              |    3.1 || assertNotIn(a, b)        | a not in b          |    3.1 || assertIsInstance(a,b)    | isinstance(a,b)     |    3.2 || assertNotIsInstance(a,b) | not isinstance(a,b) |    3.2 |#+begin_src python :results outputimport unittestfrom main import addclass TestMathFunctions(unittest.TestCase):    def test_add(self):        result = add(1,5)        self.assertEqual(result, 6, msg="Add did not bring back 6 when given 1 and 5")        result = add(0,0)        self.assertEqual(result, 0, msg="Add did not bring back 0 when given 0 and 0")        result = add(-1,1)        self.assertEqual(result, 0, msg="Add did not bring back 0 when given -1 and 1")#+end_src**** Unit Tests v. TDD v. BDDWhen designing code, write the tests first.jBehaviour Driven Design : Write tests that check the functionality of the code. Check if the outputs are correct.**** HintingType hints allow us to declare waht type the variable should be. Third party modules*** Big O Notation**** PsuedocodeA way of expressing algorithms without using the syntax from any one programming language.Benefits: pseudocode is designed to be clear to anyone. Allows us to express plans for our code without figuring out how to execute that plan. Find a method to solve the problem, not how to implement it in a programming language.How do we write pseudocode? :- Use indentation like you would in Python- Use index notation like in Python- Surround strings with quotes- Use control structures (if/elif/else;for;while)- Use keywords like input, return and print, to show data input or output- Add comments for clarification- Be concise- Each line should have one statement- Dont use built in functions from Python.- List variable names in all caps.- Declare name and type of global variables can make interpretation simpler .#+begin_srcvariable: ADJACENCY_MATRIX # Matrixvariable: NODES_TO_VISIT # Set of stringsvariable: SHORTEST_PATHS # Dictionaryvariable: INITIAL_NODE # Stringvariable: CURRENT_PATH_LENGTH # Integervariable: CURRENT_NODE # String# Get the inputsinput ADJACENCY_MATRIXinput NODES_TO_VISIT# Set the distance to every node to infinityfor NODE in NODES_TO_VISIT    SHORTEST_PATHS[NODE] = ∞# Set up the initial stateCURRENT_NODE = INITIAL_NODECURRENT_PATH_LENGTH = 0SHORTEST_PATHS[CURRENT_NODE] = 0while NODES_TO_VISIT is not empty    remove CURRENT_NODE from NODES_TO_VISIT    # check all the adjacent nodes to the current node    for DISTANCE to NODE in ADJACENCY_MATRIX[CURRENT_NODE]        # if going through the current node reveals a new, shorter path to any of them...        if DISTANCE is not 0 and DISTANCE+CURRENT_PATH_LENGTH < SHORTEST_PATHS[NODE]            # record it as the new shortest path            SHORTEST_PATHS[NODE] = DISTANCE+CURRENT_PATH_LENGTH    # move to the closest node to the initial node that hasn't yet been visited    CURRENT_NODE = node from NODES_TO_VISIT with lowest value in SHORTEST_PATHS    CURRENT_PATH_LENGTH = SHORTEST_PATHS[CURRENT_NODE]return SHORTEST_PATHS#+end_src**** Big OWe need a way to discuss and compare efficiency. Sometimes we are concerned with how long the algorithm might take, or how much space it may take up.While we can consider Time, disk space or memory- we often use the number of operations to express Big O notation.In most cases we consider the worst case scenario. We can look at best case average or worst. Algorithm wont always receive to the same inputs.We will look at the following Big O complexity values:- Constant:  O(1) or O(c)  The number of steps to execute does not change with the number of items of a list.- Logarithmic:  O(logn)Example: binary search algorithm.Each time through the loop the list is cut in halfDividing problem size with each step.- Linear:  O(n)  In worst case, number of steps is equal to number of items in a list  Step through each time in the list.- Quadratic: O(n^2)Nested loops - bubble sort. n to the power of number of nested loops.- Exponential: O(2^n) Recursive algorithms that call themselves multiple times - exponential time.Example: Reccursive Fibonacci sequence.#+begin_srcdef fibonacci(INDEX)    if (INDEX <= 1):        return INDEX    else:        return fibonacci(INDEX - 2) + fibonacci(INDEX - 1)#+end_src**** Calculating Big O Complexity:***** Expressing Big O Complexity:Round all multiplied or added constants down to 1.Set all variables to NPick the most significant term in your equation to keep and remove all the others.Example:~5000 + 2*number_red_team*number_blue_team + 5*logn(number_red_team) + 3*2^number_blue_team~Steps:1. Round all constants down to 1.  ~1 + number_red_team*number_blue_team + logn(number_red_team) + 2^number_blue_team~2. Set all variables to N   ~1 + N^2 + logn(N) +2^N~3. Drop everything except most significant term:~2^N~A handy guide to complexity significance is:~C < logn(N) < N < N*logn(N) < N² < 2ᴺ < N!~***** Identifying the main operation of an algorithm:Usually the operation that happens most often in the worst case scenario.The operation that completes the point of the algorithm.Usually the operation that is at the centre of any control flow or loops.** Week 8 - Policies, Standards, Procedures and PasswordsFor security to serve the business, things need to be written down these are:- Policies- Standards- Procedures  Compliance drives security. Things need to be written down.***  Pyramid of PainPolicies: WHY - mandatory formal statement endorsed by senior management. High level, should not delve into specifics.Policy should reflect an organisation's risk appetite.What restrictions does company put on employees.Example: University Acceptable Use of ICT Resources Policy.Standards: WHAT - Mandatory actions or rules that give polices support and direction.Describe a specific use of a technology or describe specific user behaviour.International Organisation for Standardisation ISO 27001 and 27002National Institute of Standards and Technology Cyber Security Framework - NIST CSFNorth American Electric Reliability Corporation- NERCPayment Card Industry Data Security Standard - PCI DSSAustralian Government Information Security Manual - ISMTop 3 we are likely to encounter in our career:*ISO 27001 - large orgs with marture business process.*Requires management to examine security risks. Deign and implement a suite of security controls. Adopt overarching management process to continue to meet security needs ongoing basis.Core ISO Assessment is: Plan-Do-Check-Act cycle. Two stages to ISO compliance.*PCI DSS:  Created by major credit card issuers*Annual review required by external Qualified Security Assessor (QSA) or by the organisations own Internal Security AssessorDifferent levels based on the number of transactions handled annually.6 Objectives. -> 12 requirements for each objective.*ISM* - Written by Aus C4 principles:Reduce attack surface - limit ports to only what is needed: e.g.  80 and 443 for a webserver.ASC and ACSC created the essential 8 things an organisation should do: the baseline.- Application Whitelisting- Configure Microsoft Office macro settings- Patch applications- User application hardening- Restrict administrative privileges- Patch operating systems- Multi-factor authentication- Daily backups*Procedures*: HOW. Step by step guide for accomplishing a task. Low level and specific.All common business tasks should be documented as procedures. Should be able to be followed by even most junior staff.*** PasswordsWhy do passwords fail -Human Factor :The Psychology of passwords - blog postsPEBKAC - Problem Exists Between Keyboard And ChairTo solve the problem you need to setup your users to win: Policies.Most common attacks against passwords:- Brute Force Attack- Dictionary Attack- Password Spraying Attack- Rainbow Table Attack: Database of password hashes -> looks for a match.  John the ripper is the classic brute force program for password cracking.  Mimikatz - most common tool used by attackers to dump password hases out of memory.  Well known tool to extract plaintexts passwords, hash, pin code and kerberos tickets from memory. mimikatz can also perform pass the hash, pas the ticket or build Golden tickets.*** Hash Tables Hash function: A function that accepts an object as input and outputs a value based on that objects features Hash table: Table that matches up keys (hashes) with values (hashed objects) Efficiency: Every object has only one possible location on the table, based on its hash.Drawbacks: Result in unused memory space, occasionally suffer from hash collisions.   Hash table is a usefull tool for improving the efficiency of our code.   Hashing functions: Takes an object as input, preforms operations on the object to give an output that is determined by the objects features.   In cryptography, complex hash operations are based on secret keys, which aim to be hard to reverse.   A hash table is a data strcutre that associates a set of keys with a set of values.  When you create a hash table you decide how much data you want to be able to store, and set aside that much space in memory.   Hashing tables have bigO = C Hash Collisions: Hash tables have their inconveniences. .** Week 9 - Exam, Workbook & Attacks*** AttacksThe ACSC has released an easy to understand reference:https://www.cyber.gov.au/acsc/individuals-and-families/threatsMITRE ATT&CK framework is globally accessible knowledge base of adversary tactics and techniques based on real work observations.https://attack.mitre.orgReal world case examples. -- Writing Reports -- Link back to the ID.*** Security+ BreakdownCompTIA's Security+ Certification Breaks down the attacks into 4 different categories.1. Social Engineering   Manipulating your target to achieve your desired outcome. Eg- Pretext, rapport, leverage trust.   https://www.social-engineer.org/framework/general-discussion/   Phising is a form of social engineering. - The subjects are worded to give you a sense of urgency.2. Application / Service AttacksDenial of Service attack (DoS)Distributed Denial of Service (DDoS)CVE --> common vulnerability and exploit.Syn Flood Attack -> spam syn requests.Buffer Overflows - area of memory set aside to hold data - this attack fills that memory with junk, force adjacent memory to be overwritten.ARP Poisoning : Procedure for mapping an IP address t oa physical machine address (MAC). An ARP attack can point a user to an evil site or resource.3. Web Application Attacks   Open Web Application Security Project - details most common web application attacks   https://owasp.org/www-project-top-ten/   - Injection:   - Broken Authentication:   - Sensitive Data Exposure :     4. Wireless Attacks :WEP - Wired Equivalent Privacy Attack. The strongest implementation of WEP can be cracked in less then 5 minutesA wireless card that is capable of inject and kismet is needed.WPA2-PSK.Port Scan --> what devices are connected. Then determine what vulnerabilityListening device --> where traffic is routed.Evil Twin : an access point that is owned by the attacker.Collission attack - machine learning ?Blue Jacking:5. Cryptographic Attacks   Don't roll your own crypto.** Week 10 - Unpacking, Comprehensions and Lambda, Cloud Basics*** UnpackingYou can assign multiple values to different valiable in a single line of code:~name,age = "Sally",28~This is called unpacking - we are breaking apart the tuple into pieces and assigning the values to variables. In Python, whever you seperate values with a comma you are creating a tuple.#+begin_src pythondef get_min_max(numbers):    min = None    max = None        for num in numbers:            if min == None or num < min:                min = num            if max == None or num > max:                max = num        return (min, max)#+end_src#+RESULTS:Here we have a function that will reutrn the minimum and maximum numbers in a list as a tuple.But now we understand unpacking we can shorten our code to be this:#+begin_src pythonnumbers = [4,6,9,7,2]min, max = get_min_max(numbers)#+end_srcUnpacking is strict -> You cannot unpack more or less than what is avalibleWhat if don't know how much to unpack? -*** *Prefix Operations * and **#+begin_src python2 * 23 ** 3#+end_srcIn the above example a single * is used to denote multiplaction and ** the exponent. But they can also be used for unpacking.#+begin_src pythonx, *y = 1,2,3print(x)print(y)#+end_srcBy adding the * character before y we have told Python that the y variable will hold all of the unpacked values in a list.This can also be done on strings.The * character can also act like a slice:#+begin_src python :results outputfirst, *middle, last = [1, 2, 3, 4, 5, 6]print(middle)#+end_src#+RESULTS:: [2, 3, 4, 5]#+begin_src python :results outputdef add_three (x,y,z):    return x + y + z# by using the * character we can spread out a sequence to fill the argumentsnumbers = (2,6,1)answer = add_three(*numbers)print(answer)#+end_src#+RESULTS:: 9Another way we can use the * character is to accept a vairable amount of arguments into a function.#+begin_src python :results outputdef add(*numbers):    answer = 0    for num in numbers:        answer += num    return answer# Now w ecan call our add function with any number of arugments.print(add(4,1,2,4))#+end_src#+RESULTS:: 11The last thing we will look at is calling a function with the ** character. ** is similar to * but instead for keyword arugments.Unpacks dictionaries. Using this technique a function can accept as many inputs as we want.#+begin_src python :results outputdef subtract(x,y):    return x-ykey_values = { "y":3, "x": 6 }answer = subtract(**key_values)print(answer)#+end_src#+begin_src python :results outputdef myprint(**kwargs):    for key,value in kwargs.items():        print(key, "=", value)myprint(x=1,y=2, pasta = "delicious")#+end_src#+RESULTS:: x = 1: y = 2: pasta = delicious*** ComprehensionsComprehensions give us a shorter way to create a iterable such as a list, tuple, dictionary or set from another interable. This is very convient for doing something like filtering a list.For example -- if we wanted to create a list of fruits that begin with the letter "a". We can solve it with our current knowledge of loops and if statements.#+begin_src python :results outputfruits = ["apple","orange","apricot","grape","avocado"]a_fruits = []for fruit in fruits:    if fruit[0] == "a":        a_fruits.append(fruit)print(a_fruits)#+end_src#+RESULTS:: ['apple', 'apricot', 'avocado']We can also solve this problem using list comprehension#+begin_src python :results outputfruits = ["apple","orange","apricot","grape","avocado"]a_fruits = [fruit for fruit in fruits if fruit[0] == "a"]print(a_fruits)#+end_src#+RESULTS:: ['apple', 'apricot', 'avocado']The syntax for comprehension is:~[expression for member in interable (conditional)]~We can also use this to create other things than just lists such as set or dictionaries.#+begin_src python :results outputfruits = ["apple","orange","apricot","grape","avocado"]upper_fruits = {fruit.upper() for fruit in fruits}print(upper_fruits)#+end_src#+RESULTS:: {'APRICOT', 'ORANGE', 'AVOCADO', 'GRAPE', 'APPLE'}The only thing that changes was instead of using square brackets we used curly braces.If we wanted to generate a dictoinary instead of a set we would need to give both a key and a value instead of just the value.We will use the enumerate biult in function to help us with this.#+begin_src python :results outputfruits = ["apple", "orange", "apricot", "grape", "avocado"]upper_fruits_dict = {index:fruit.upper() for index, fruit in enumerate(fruits)}print(upper_fruits_dict)#+end_src#+RESULTS:: {0: 'APPLE', 1: 'ORANGE', 2: 'APRICOT', 3: 'GRAPE', 4: 'AVOCADO'}The upper_fruits_dict variable will now be a dictoinary of keys that were the index numbers in the original list with uppercase values.*** LambdaLambda is a function  that doesnt need to be defined, It is forgotten after it is used. It is also known as an anonymous function.The Syntax for a lambda function is:~lambda x, y: x + y~We can assign the lambda function to variable:~add = lambda x,y: x + y~Lambda functions are useful for when you need to define some type of one off logic. Here's an example:#+begin_src python :results outputdef is_even(x):    return x % 2 == 0def starts_with_a(x):    return x[0] == "a"numbers = [1, 2, 3, 4, 5, 6]countries = ["australia", "canada", "england", "america"]def my_filter(list_param, func_param):    new_list = []    for item in list_param:        if func_param(item):            new_list.append(item)    return new_listeven_numbers = my_filter(numbers, is_even)a_countries = my_filter(countries, starts_with_a)print(even_numbers)print(a_countries)#+end_src#+RESULTS:: [2, 4, 6]: ['australia', 'america']This way is more reusable because now we can pass in any function we would like to use and if the logic with the funciton reutrns a truthy value the value will be included in the new list.But by creating function definitions for the logic that will be used in the filter we are taking up unessecary memory since Python will  now keep track of that function forever. Instead if we use lambda functio nwe will free up the memory since Python won't have to keep track of it after it has been used.#+begin_src python :results outputnumbers = [1, 2, 3, 4, 5, 6]countries = ["australia", "canada", "england", "america"]even_numbers = my_filter(numbers, lambda x: x % 2 == 0)a_countries = my_filter(countries, lambda x: x[0] == "a")print(even_numbers)print(a_countries)#+end_src*** Example - Class Composition Refresher*** Cloud Basics- Private Cloud- Infrastructure as a Service (IaaS)- Platform as a Service (PaaS)- Software as a Service (Saas)- Hybrid CloudCloud computing relies on sharing compute resources (One server runs many customer instances). Cloud typically has a pay as you go model. Security is a shared responsibility between provider and customer.41.5 % AWS - 29.4 % Azure. Of all internet traffic.Browser plugin that will disallow anything that uses AWS :**** Shared Responsiblity ModelCustomer is responsible for data in the cloud.AWS is responsible for security of the cloud.**** Trust, but VerifyAWS has been independetly verified by external auditors against multiple standards. Some important ones:- ISO 27001****  AWS Tools- IAM- Storage S3, & Policies and Access Control Lists (ACL)- CloudTrail (logs)- CloudWatch (SOAR)- Key Management (KMS)- Web app firewall (WAF)- Shield (DDoS Protection)**** IAMManaging Accounts > Global service > 3 Sections: Users, Groups and Roles.User: Entity can represet a person or a service. Give people the ability to sign into the AWS consoleGroups: Collection of users -> Specify permissions for all.Roles: Similar to users but doesnt have a password or access key associated with it. Used when a user or service needs to have specific powers that the role provides. /temporary access measure/ that allows users to complete the task and then the level of privlege is removed.Roles are useful :/You're creating an application that runs an EC2 instance and that application makes requests to AWS//You're creating an app that runs on a mobile phone and that makes requests to AWS/**** Bucket PoliciesAttached to S3 buckets - Storage.You can specify what actions or allowed or denied on the bucket.E.g Adam can PUT in the bucket but cannot DELETE. Even can READ but not PUT.Bucket policies are JSON blobls.ACLs are JSON blobs too. This is handy.**** CloudTrailLots of logs - Tracks use of AWS isntance and API activity.Allows visualisation of logs using automated dashboard.**** Key Management ServiceGives user control over cryptographic keys to protect data**** Web Application FirewallProtects your apps or APIs against common web exploits found in the OWASP TOP 10. Sits in-line and will drop identified malicious traffic.**** AWS ShieldDDoS protection for large scale deployments. Designed to prevent known infrastructure (Layer 3 and 4) attacks.L3: attacks on the Network layer of the OSI model.L4: attacks o nthe transport layer of the OSI model.A rule can be deployed globally with-in seconds and then the traffic will be dropped.DDoS attacks on the cloud:**** AWS CertificationsFoundational - Cloud PractionerAssociate: Architect, Operations, Developer.**** What happens when the Cloud goes down?**** Cloud Hopper Case StudyIn 2017 Cyber-espionage campagin was conduced against manged IT service providers.- HPE- IBM- Fujitsu- NTTAmongst those affected.Who did it: APT10 is a Chinese cyber espionage group,https://www.fireeye.com/current-threats/apt-groups.htmlhttps://attack.mitre.org/groups/G0045Attack Vector: Spear Phised employees to gain access.https://www.reuters.com/investigates/special-report/china-cyber-cloudhopperCloudstirke's work on naming and tracking the the individuals:https://www.crowdstrike.com/blog/two-birds-one-stone-panda** Week 11 - AWS*** AWS**** Cloud IntroCloud computing enables you to stop thinking of infrastructure as hardware but instead as software that we can just use when needed. Cloud allows you to be much more flexible. It is easy to quickl and cost-effectively scale up, scale down or modify your infrastrucue when you treat it as software instead of hardware.**** AWS Web ServicesAmazon provide over 165 different services but we will focus on 3.- Amazon VPC (Netowrking)- Amazon EC2 (compute)- Amazon EBS (storage)********* Term 3** Assignments*** TODO T3A1.1 - Workbook/Information Systems*** TODO T3A1.2 - Workbook/Database Systems*** TODO T3A2 - Report/Research and Improve and Application Stack*** TODO T3A3 - Implement System with Data and Application Layers** W1D1/Databases*** Introduction to Databases:A database is a location where data and metadata (data about data) is stored.A database is a collection of related record or tables. When records in one table are related or linked to records on other tables this is called a *relational database*.*DBMS (Database Management System)* : Interface between the user and database. DBMS improves data sharing, security & integration. DMBS reduces inconsistency and improves access and retrieval (query)A DBMS will improve users productivity and makes the decision-making process much easier. You can create/manage a single or multi-user database using a DBMS.DBMS' use *ACID* concepts to maintain database health:- *Atomicity*: Transactions run to completion and not partially.- *Consistency*: Data needs to be correct.- *Isolation*: Transactions run concurrently in isolation of one another.- *Durability*: Permanent storage of transactions regardless of software and hardware failure.*** Entity Relationship Diagram (ERD)A database can be modelled using a /Entity Relationship Diagram (ERD)/. Simply an ERD is a collection of entitites and relationships between them. There are three main components:*Entities*: Can be a student, company, car plant etc. These have *attributes* which are descriptive properties for all members of an entity set.*Entity set*: Is a group of entities that share the same properties.*Relationship*: Is an association among several entities. Fro example students and their grades. Relationships can have different cardinalities (relation) and ordinalities (position):- One to One- One to Many- Many to ManyThere are different modelling styles or notations such as Information Engineering Style, Chen Style, Bachman Style and Martin Style.Tools to create ERD diagrams include:- SmartDraw- Microsoft Visio- Diagram Editor*** ERD Basics - Information Engineering Style:- *Rectangle*: Entity set (Student, Course)- *Diamond*: Relationship (Enrol)- *Ellipses*: Attributes  + Double: Multivalued attributes  + Dashed: Derived Attribute***  ERD Cardinality:Cardinality means the maximum number of relationships:One to one:(Left to Right) A student can have one and only one contact details.(Right to Left) : A contact details record belongs to one and only one student.One to many:(Left to Right): A customer can make many orders.(Right to Left): An order is made by One and only one customerMany to Many:Left to right: A student can enrol in Many courses.Right to left: A course can have Many students enrolled.*** ERD Ordinality:Ordinality means the minimum numbers of relationships.One (optional) to One (Mandatory):Cardinality (Maximum):  A student can enrol in one and only one course and a course can have one and only one student enrolled.Ordinality (Minimum): A course can have no student enrolled (optional) but a student MUST be enrolled at least in one course (Mandatory)Many (optional) to Many (Mandatory):Cardinality (Maximum): A student can enrol in Many courses and a course can have Many students enrolled.Ordinality (Minimum): A course can have no students enrolled (optional) but a student must be enrolled at least in one course (mandatory)*** Database Schema:Schema is the logical structure of the database. You can say schema is the /blueprint/ that defines tables, fields, and relationships.To uniquely identify a record in a table you need a primary key.- You cannot assign the same value to multiple records.- The PK cannot be NULL- A primary key is needed in a relational database to link a table with another. To make a relationship you will use a primary key and a *foreign key*.*Foreign Key*: A primary key of one table is added into another table to build a relationship called a foreign key.E.g. In a one to one relationship:The primary key of the first table is added to the primary key of the second table.Student: Student_ID is linked to Contact Details: Contact_IDE.g. In a one to many relationship:We need to link the primary key of the first table to the foreign key of the second table.Customer: Customer_ID is linked to Order: Customer_ID NOT the Order_ID!E.g. In a many to many relationship:We need to create a new joint table with two foreign keys. that are the primary keys of the tables in the relation.Student: Student_ID is linked to Enrol Table.Course: Course_Code is linked to Enrol TableEnrol Table: Has Course_Code and Student_ID.*** NormalisationWhen changes occur we need a system to make sure the structure of the database is maintained.Fire Normal Form (1NF) Rules:1. Column names must be unique.2. Records in one column must be of same type.3. Order of records does not matter.4. Must have atomic values in columns.*** Guided Side App** W1D2 - SQL*** Introduction to SQLSQL stands for Structured Query Language and is the language used to define, manipulate and control relational databases. SQL commands are put into categories:- DDL (Data Definition Language): Used to create and modify a database by creating altering or deleting objects.- DML (Data Manipulation Language): Insert data into database- DCL (Data Control Language): Secure data by creating roles or assigning permissions- TCL (Transactional Control Language): Manage database transactions such as saving or restoring transactions- DQL (Data Query Language): Used for data retrieval.*** DDL ( Data Definition Language )**** CreateCreate Database#+begin_src sqlCREATE DATABASE mydatabase;#+end_srcCreate Table#+begin_src sqlCREATE TABLE Person( ID INTEGER,  LastName VARCHAR,  FirstName VARCHAR,  Age INTEGER,  City VARCHAR);#+end_srcCreate Role:#+begin_src sqlCREATE ROLE jack;CREATE ROLE dan LOGIN;CREATE ROLE karim LOGIN CREATEDB;CREATE ROLE peter LOGIN CREATEROLE;CREATE ROLE ash LOGIN SUPERUSER;CREATE ROLE dbuser LOGINPASSWORD 'securecode';#+end_src**** DropDrop Table#+begin_src sqlDROP TABLE person;#+end_srcDROP database#+begin_src sqlDROP DATABASE mynewdatabase;#+end_srcDrop Role#+begin_src sqlDROP ROLE ash, karim, peter;#+end_src**** ALTER and RENAMEAlter DATABASE name#+begin_src sqlALTER DATABASE current_database_name RENAME TO new_database_name;#+end_srcAlter DATABASE owner#+begin_src sqlALTER DATABASE mynewdatabase OWNER TO jad;#+end_srcAlter Table#+begin_src sqlALTER TABLE patientRENAME TO patients;#+end_srcADD COLUMN#+begin_src sqlALTER TABLE patientADD COLUMN roomNumber INTEGER;#+end_srcDROP COLUMN#+begin_src sqlALTER TABLE patientDROP COLUMN roomNumber;#+end_srcRename Column#+begin_src sqlALTER TABLE patientRENAME COLUMN patientidTO patientnum;#+end_srcTruncate#+begin_src sqlTRUNCATE TABLE patients;#+end_src*** DML (Data Manipulation Language):**** Insert#+begin_src sqlINSERT INTO patients (patientnum, patientfname, patientlname, patientsuburb)VALUES (1, 'Jack', 'Darling,' 'Ryde');INSERT INTO patientsVALUES (5, 'Jim', 'Lancer', 'Sydney');#+end_src**** Update#+begin_src sqlUPDATE patientsSET patientfname = 'Jamal'WHERE patientnum = 1;UPDATE patientsSET patientsuburb = 'Sydney'WHERE patientsuburb is NULL;#+end_src**** Delete#+begin_src sqlDELETE FROM patientsWHERE patientfname = 'Jamal';DELETE FROM patientsWHERE patientnum is NULL;#+end_src*** DCL (Data Control Language):**** Grant#+begin_src sqlGRANT SELECT  ON patient  TO jad;GRANT ALL  ON patient  TO jad;#+end_src**** Revoke#+begin_src sqlREVOKE SELECT  ON patient  FROM jad;REVOKE ALL  ON patient  FROM jad;#+end_src*** TCL (Transactional Control Language):**** Commit#+begin_src sqlSTART TRANSACTION;INSERT INTO patient            VALUES (23, 'Jane','Feb','SOP');COMMIT;#+end_src**** Rollback#+begin_src sqlBEGIN;DELETE FROM patient            WHERE patientid = 23;ROLLBACK;#+end_src*** DQL (Data Query Language):**** Select#+begin_src sqlSELECT patientid, patientfname         FROM patient;SELECT *         FROM patient;#+end_src*** SQL Constraints:**** Data TypesPostgreSQL Common data types include:- Character:  + VARCHAR(n): fixed length character, does not pad spaces  + CHAR(n): fixed length character, pads spaces  + TEXT: variable length or unlimited length character- Numeric:  + Integer:    - SMALLINT: 2-byte signed integer > range from -32,768 to 32767    - INT: 4-byte integer > range from -2,147,483,648 to 2,147,483,647  + Floating Point:    - NUMERIC(precision,scale):  + Temporal:    - DATE: dates only    - TIME: time only    - TIMESTAMP: date and time values  + Boolean:    - true: true, '1', 't', 'y' or 'yes'    - false: false, '0', 'f', 'n', or 'no'#+begin_example sqlCREATE TABLE MyDataTable (ID SERIAL,Name VARCHAR(5),Age SMALLINT,Address TEXT,Price NUMERIC(6,2),Birthdate DATE,Birthtime TIME,Birthdatetime TIMESTAMP,Owner BOOLEAN);#+end_example**** Not Null Constraint#+begin_src sqlCREATE TABLE Persons (  ID INTEGER NOT NULL,  LastName VARCHAR,  FirstName VARCHAR,  Age INTEGER,  City VARCHAR);#+end_src**** Unique ConstraintCreate persons table with unique constraint:#+begin_src sqlCREATE TABLE Persons (  ID INTEGER NOT NULL UNIQUE,  LastName VARCHAR,  AGE INTEGER,  City VARCHAR);#+end_src**** Primary Key ConstraintCreate persons table with PK Constraint:#+begin_src sqlCREATE TABLE Persons (  ID INTEGER PRIMARY KEY,  LastName VARCHAR,  FirstName VARCHAR,  Age INTEGER,  City VARCHAR);#+end_src**** Check ConstraintCreate Persons table with check constraint:#+begin_src sqlCREATE TABLE Persons (    FirstName VARCHAR,    Age INTEGER,    City VARCHAR,    CONSTRAINT AgeCheck CHECK (Age BETWEEN 18 AND 25),    CONSTRAINT CityCheck CHECK (City='Sydney'));CREATE TABLE UserAccount(    Username VARCHAR,    Password VARCHAR,    CONSTRAINT PassLenCheck CHECK (LENGTH(Password)>6));#+end_srcTest the Check (AgeCheck) Constraint:#+begin_src sqlINSERT INTO PersonsVALUES('Mike',32,'Sydney');#+end_srcOutput: ERROR: persons violates check constraint age checkDetail: Failing row contains (Mike, 32, Sydney)** W1D3 - Security Session: Threats, Attacks and VulnerabilitiesA vulnerability, according to iso 27005 is a weaknesses of an asset or group of assets that can be exploited by one or more threats.Common Vulnerabilities include:End-of-Life Systems: Where a system has reached a point where it is no longer supported by a developer. This means that patches or updates will no longer be released and these old systems are left vulnerable.Embedded Systems: The software present on embedded systems is separate from any update or patching process which can bring hidden vulnerabilities into the overall system.Improper Input Handling: When an application does not check what the user can input into it. If the developer doesnt implement measure to safely handle input the application can be vulnerable to buffer overflows, XSS, XSRF.Improper Error Handling:Misconfiguration or Weak Configuration: E.g. the configuration that the system had when it was first shipped to the user.Resource Exhaustion: Where a system does not have all of the resources it needs to function, like a distributed denial of service attack.Untrained Users:  The users do not know how to operate a system properly.Vulnerable Business Process: What if you could pay an invoice without matching it to an approved purchase order.Weak Cipher Suites and Implementations: For a cryptographic algorithm to be trusted it needs years of rigorous testing by academics before it is ever considered to be strong.System Sprawl & Undocumented Assets: An understanding of all the assets that the organisation has and how they are connected. That will be what is called a Configuration Management Database (CMDB).Zero Days:  These vulnerabilities will exist in an unknown state until they are discovered by a security researcher, developer, hacker or nation-state sponsored unit.Improper Certificate & Key Management: Certificates are the most common method of transferring and managing crypographic keys between parties. The PKI system is an established process to ensure proper key hygiene and limit the potential issues associated with public key cryptography.**** Technology TypesInternet ProtocolNetwork Address Translation (NAT) is the remapping of one IP address into another by modifying the network address information in the ip header of packet while they are in transit.Firewalls: Device or software that acts as a barrier between internal network and greater network. There are three generations of firewalls.1st Generation: Packet Filters - filter pakcets only, and will do the following actions based on its rule:1. drop the packet2. Reject the packet3. Allow the packet through.These firewalls will filter on IP addresses (blacklist or whitelist) or port numbers.Typical corporate deployment of a network firewall will allow http 80, https (443) and DNS (53). Outbound and inbound (bi-directionality) and drop the following protocols at the network perimeter SMB (139) RDP (3389) Telnet (23).Ports are a logical construct that identifies a specific process or network service and then binds that application or service to a port number. Think of ports like doors or windows of your house.Port Scanning: Since ports are an entry point into a host over the network, it makes sense to enumerate them. This process is called port scanning.2nd Generation - Stateful Filtering:Ability to read further in to the connection between machines and remember their contents. This type of firewall will remember what IP addresses talked to one another, what port numbers they used and do packet inspection in order to determine the context of the traffic.3rd Generation- Application Layer:Deeper understanding of certain protocols. A 3rd gen firewall focuses on these protocols:- FTP- DNS- HTTP3rd gen firewalls will make a determination whether traffic is /clean/ or not. Deep packet inspection. - Resource intensive. Looking for weirdness.Web Applications Firewalls: Filters monitors and blocks HTTP traffic and form a web application. WAFs are good at stopping web application attacks like, SQL injection, Cross-site scriptiing (XSS), File inclusion attacks, Directory traversal attacks.Need a WAF and don't want to pay? www.modsecurity.orgIntrusion Prevention Systems: prevent attacks from exploring your environment by actively intercepting their traffic and terminating the connection. Two detection methods built into the device:Signature based, anomaly based. For an IPS to be effective it need to run in your network and establish a baseline of what is normal.Proxies: Relays traffic between one point to another. In corporate environment, often used to ensure safety and security of the end users.Security Information and Event Management (SIEM): Is a technology that allows real-time analysis of security alerts that are generated by applications and network hardware. SIEMs will ingest up to thousands of logs per second in order to provide that real-time picture of the network.SIEMS can convert malicious communications and encrypted channels.** W2D1 - SQL Aggregates and Joins*** Hospital Database Example#+begin_src sqlCREATE DATABASE Hospital;CREATE TABLE Patient( PatientId INTEGER PRIMARY KEY, PatientFName VARCHAR, PatientLName VARCHAR, PatientSuburb VARCHAR);CREATE TABLE Doctor( DoctorId INTEGER PRIMARY KEY, DoctorFName VARCHAR, DoctorLName VARCHAR, DoctorSuburb VARCHAR);CREATE TABLE Appointment( PatientId INTEGER, DoctorId INTEGER, AppDate TIMESTAMP, CONSTRAINT patientFK FOREIGN KEY (PatientId) REFERENCES Patient (PatientId), CONSTRAINT doctorFK FOREIGN KEY (DoctorId) REFERENCES Doctor (DoctorId));#+end_srcAbove a /junction table/ is created (many to many relationship)For a many to many relationship we need to create a junction table. The junction table will have two foreign keys which are the primary keys of other tables we want to relate. In this example, a patient can see many doctors and a doctor can have many patients. The table Appoint is the joint table holding the Patient PK (PatientID) and Doctor Pk (DoctorID).*Add data to the tables*#+begin_src sqlINSERT INTO PatientVALUES (201901,'Jack','D','Rhodes'),       (201902,'Dan','J','Ryde'),       (201903,'Rachel','K','Medowbank'),       (201904,'Karen','L','Rhodes');INSERT INTO DoctorVALUES (201,'SAM','K','Medowbank'),       (202,'Mac','B','Rhodes'),       (303,'Randy','L','Ryde'),       (404,'Hans','N','Silverwater'),       (406,'Dan','K','Medowbank'),       (413,'Mars','B','Rhodes'),       (423,'Roshan','L','Rhodes'),       (408,'Brian','N','Silverwater');INSERT INTO AppointmentVALUES (201901,201,'2019-04-23 10:30'),       (201902,202,'2020-05-24 11:30'),       (201903,303,'2019-06-23 12:30'),       (201904,404,'2021-04-25 11:30'),       (201901,303,'2019-03-23 13:30'),       (201902,201,'2017-02-25 14:30'),       (201903,303,'2019-07-26 15:30'),       (201904,201,'2018-08-27 15:30');#+end_src\c databasename (connect to database)Pizza Example - Many to One. Only one person will have each order.*** PizzaRestraunt Database Example#+begin_src sqlCREATE DATABASE PizzaRestaurant;CREATE TABLE customers( customer_id INTEGER,  customer_name VARCHAR NOT NULL,  customer_location VARCHAR DEFAULT 'Sydney',  CONSTRAINT customers_pk PRIMARY KEY (customer_id));CREATE TABLE orders( order_id INTEGER,  order_date Date NOT NULL,  order_type VARCHAR DEFAULT 'Pickup',  customer_id INTEGER,  CONSTRAINT orders_pk PRIMARY KEY (order_id),  CONSTRAINT orders_fk FOREIGN KEY (customer_id)  REFERENCES customers(customer_id));CREATE Items tableCREATE TABLE items( item_id VARCHAR,  item_name VARCHAR,  item_price NUMERIC,  CONSTRAINT items_pk PRIMARY KEY (item_id));CREATE TABLE ordersitems( order_id INTEGER,  item_id VARCHAR,  CONSTRAINT ordersitems_fk1 FOREIGN KEY (order_id)  REFERENCES orders(order_id),  CONSTRAINT ordersitems_fk2 FOREIGN KEY (item_id)  REFERENCES items(item_id));#+end_src#+begin_src sqlINSERT INTO customers(customer_id, customer_name, customer_location)VALUES(200301,'Jack','Ryde'),(200306,'Richard','Winyard'),(200307,'Michael','North Sydney'),(200308,'David','Rhodes'),(200309,'Julian','Winyard');INSERT INTO orders(order_id, order_date, order_type, customer_id)VALUES(1,'2016-06-22','Delivery',200301),(2,'2016-06-23','Pickup',200301),(3,'2016-06-24','Pickup',200306),(4,'2016-06-12','Delivery',200307),(5,'2016-03-12','Delivery',200307),(6,'2016-04-12','Delivery',200307),(7,'2016-06-03','Delivey',200309),(8,'2016-07-22','Delivey',200309),(9,'2017-07-22','Pickup',200308),(25,'2017-06-22','Delivey',200308),(10,'2017-03-22','Delivery',200301),(11,'2016-06-12','Pickup',200301),(12,'2018-06-11','Pickup',200306),(13,'2018-02-22','Delivery',200307),(14,'2018-07-16','Pickup',200308),(15,'2018-06-22','Pickup',200308),(16,'2019-06-26','Pickup',200309),(17,'2019-06-27','Delivery',200309),(18,'2019-08-22','Delivery',200309),(19,'2019-06-02','Delivery',200309),(20,'2020-03-04','Pickup',200308),(21,'2020-05-02','Pickup',200308),(22,'2020-05-22','Pickup',200309),(23,'2020-04-22','Delivery',200309),(24,'2020-03-22','Delivery',200309);INSERT INTO items(item_id, item_name, item_price)VALUES('pz213','Cheeze Pizza',10.00),('pz214','Chicken Pizza',14.00),('sd211','Green Salad',8.00),('sd210','Chicken Salad',10.50);INSERT INTO ordersitems(order_id, item_id)VALUES(1,'pz213'),(1,'pz214'),(1,'sd211'),(2,'sd211'),(2,'pz214'),(3,'pz214'),(3,'sd211'),(4,'sd211'),(4,'pz214'),(5,'sd210'),(6,'pz213'),(9,'sd210'),(9,'pz213'),(6,'pz214'),(6,'pz213'),(7,'pz214'),(7,'pz213'),(8,'pz214'),(8,'pz213'),(9,'pz214'),(9,'pz213'),(10,'pz213'),(10,'pz214'),(10,'sd211'),(11,'sd211'),(11,'pz214'),(12,'pz214'),(12,'sd211'),(13,'sd211'),(13,'pz214'),(14,'sd210'),(14,'pz213'),(15,'sd210'),(15,'pz213'),(16,'pz214'),(16,'pz213'),(17,'pz214'),(17,'pz213'),(18,'pz214'),(18,'pz213'),(19,'pz214'),(19,'pz213'),(20,'sd210'),(20,'pz213'),(21,'sd210'),(21,'pz213'),(22,'pz214'),(22,'pz213'),(23,'pz214'),(23,'pz213'),(24,'pz214'),(24,'pz213');#+end_src**** Select StatemetnThe select statement allows us to query data from tables.#+begin_src sqlSELECT *FROM doctor;SELECT doctorfname, doctorsuburbFROM doctor;#+end_srcDistinct Clause#+begin_src sqlSELECT DISTINCT doctorsuburbFROM doctor;#+end_src**** Order BY Clause:#+begin_src sqlSELECT doctorfname, doctorsuburbFROM doctorORDER BY doctorsuburb;SELECT doctorfname, doctorsuburbFROM doctorORDER BY doctorsuburb DESC;#+end_src**** Where Clause:#+begin_src sqlSELECT *FROM doctorWHERE doctorsuburb = 'Rhodes';SELECT *FROM doctorWHERE doctorsuburb = 'Rhodes' or doctorsuburb = 'Medowbank';SELECT *FROM doctorWHERE doctorsuburb != 'Ryde';#+end_src**** Aggregate functions#+begin_src sqlSELECT COUNT(doctorid)FROM doctor;SELECT doctorsuburb, COUNT(doctorid) as NumofdoctorsFROM doctorGROUP BY doctorsuburb;#+end_src**** Limit Clause#+begin_src sqlSELECT *FROM ordersLIMIT 5;SELECT *FROM ordersLIMIT 5 OFFSET 3;SELECT *FROM ordersORDER BY order_date DESCLIMIT 5 OFFSET 3;#+end_src**** Fetch Clause#+begin_src sqlSELECT *FROM ordersFETCH FIRST ROW ONLY;SELECT *FROM ordersFETCH FIRST 3 ROW ONLY;#+end_src#+begin_src sqlSELECT c.customer_name, COUNT(o.customer_id) FROM customers c, orders owhere c.customer_id = o.customer_id GROUP BY c.customer_name;#+end_srcThe above syntax creates an alias for tables (customer c and orders o). and finds how many orders each customer has made.Essentially Two tables are combined - wherever the customer name matches the customer id and display the number of matches.*** SQL JOINs#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgresCREATE TABLE RightTable(ColorId INTEGER,ColorName VARCHAR);INSERT INTO LeftTableVALUES (1,'White'),(2,'Green'),(3,'Yellow');INSERT INTO RightTableVALUES (1,'Brown'),(2,'Green'),(3,'Yellow'),(4,'Blue');#+end_src**** Inner JOINFinds /intersection/ between two table and display them:Syntax:#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres\c coloursSELECT lt.ColourName As LeftColour, rt.ColourName AS RightColourFROM LeftTable ltINNER JOIN RightTable rt on lt.ColourName=rt.ColourName;#+end_src#+RESULTS:| leftcolour | rightcolour ||------------+-------------|| Green      | Green       || Green      | Green       || Yellow     | Yellow      || Yellow     | Yellow      |**** Left JOIN#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres\c coloursSELECT lt.ColourName AS LeftColour, rt.ColourName AS RightColourFROM LeftTable ltLEFT JOIN RightTable rt ON lt.ColourName=rt.ColourName;#+end_src#+RESULTS:| leftcolour | rightcolour ||------------+-------------|| Green      | Green       || Green      | Green       || White      |             || White      |             || Yellow     | Yellow      || Yellow     | Yellow      |**** Examples#+begin_src sql :database pizzarestaurantSELECT c.customer_name, SUM(t.item_price)FROM customers cINNER JOIN orders o ON o.customer_id=c.customer_idINNER JOIN ordersitems ot ON o.order_id=ot.order_idINNER JOIN items t ON ot.item_id=t.item_idGROUP BY c.customer_name;#+end_src#+RESULTS:| customer_name |    sum ||---------------+--------|| David         | 126.50 || Julian        | 216.00 || Michael       |  88.50 || Richard       |  44.00 || Jack          | 108.00 |#+begin_src sql :database pizzarestaurantSELECT c.customer_name, SUM(t.item_price)FROM customers cINNER JOIN orders o ON o.customer_id=c.customer_idINNER JOIN ordersitems ot ON o.order_id=ot.order_idINNER JOIN items t ON ot.item_id=t.item_idWHERE c.customer_name = 'Julian' OR c.customer_name = 'David'GROUP BY c.customer_name;#+end_src#+RESULTS:| customer_name |    sum ||---------------+--------|| David         | 126.50 || Julian        | 216.00 |#+begin_src sql :database pizzarestaurantSELECT c.customer_name, SUM(t.item_price)FROM customers cINNER JOIN orders o ON o.customer_id=c.customer_idINNER JOIN ordersitems ot ON o.order_id=ot.order_idINNER JOIN items t ON ot.item_id=t.item_idGROUP BY c.customer_nameHAVING SUM (t.item_price) > 90.00;#+end_src#+RESULTS:| customer_name |    sum ||---------------+--------|| David         | 126.50 || Julian        | 216.00 || Jack          | 108.00 ||               |        |**** Self Paced Work Example:#+begin_example sql-- Create a table that will display the customer name and the sum of their order(s)select c.customer_name, sum(t.item_price)--Aliast the customer table as cfrom customers c-- Create a relation between the that created the order and the customer id on the table of customers.INNER JOIN orders o on o.customer_id = c.customer_id-- Create a relation between the items that are an order and that orders idINNER JOIN ordersitems ot on ot.order_id = o.order_id-- create a relation between all of the orders that are avalible to order and the items that were ordered.INNER JOIN items t on t.item_id = ot.item_idGROUP BY c.customer_nameHAVING SUM(t.item_price) > 90;#+end_example